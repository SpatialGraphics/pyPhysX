from collections.abc import Sequence
import enum
from typing import Annotated, overload

from numpy.typing import ArrayLike


class PxActor:
    def release(self) -> None: ...

    def getType(self) -> "physx::PxActorType::Enum": ...

    def getScene(self) -> PxScene: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

    def getWorldBounds(self, arg: float, /) -> "physx::PxBounds3": ...

    def setActorFlag(self, arg0: PxActorFlag, arg1: bool, /) -> None: ...

    def setDominanceGroup(self, arg: int, /) -> None: ...

    def getDominanceGroup(self) -> int: ...

class PxActorFlag(enum.Enum):
    eVISUALIZATION = 1

    eDISABLE_GRAVITY = 2

    eSEND_SLEEP_NOTIFIES = 4

    eDISABLE_SIMULATION = 8

class PxAggregate:
    def release(self) -> None: ...

    def addActor(self, arg0: PxActor, arg1: "physx::PxBVH", /) -> bool: ...

    def removeActor(self, arg: PxActor, /) -> bool: ...

    def addArticulation(self, arg: PxArticulationReducedCoordinate, /) -> bool: ...

    def removeArticulation(self, arg: PxArticulationReducedCoordinate, /) -> bool: ...

    def getNbActors(self) -> int: ...

    def getMaxNbActors(self) -> int: ...

    def getScene(self) -> PxScene: ...

    def getSelfCollision(self) -> bool: ...

class PxArticulationLink(PxRigidBody):
    def release(self) -> None: ...

    def getArticulation(self) -> PxArticulationReducedCoordinate: ...

    def getInboundJoint(self) -> "physx::PxArticulationJointReducedCoordinate": ...

    def getInboundJointDof(self) -> int: ...

    def getNbChildren(self) -> int: ...

    def getLinkIndex(self) -> int: ...

    def setCfmScale(self, arg: float, /) -> None: ...

    def getCfmScale(self) -> float: ...

    def getLinearVelocity(self) -> PxVec3: ...

    def getAngularVelocity(self) -> PxVec3: ...

class PxArticulationReducedCoordinate:
    def getScene(self) -> PxScene: ...

    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def isSleeping(self) -> bool: ...

    def setSleepThreshold(self, arg: float, /) -> None: ...

    def getSleepThreshold(self) -> float: ...

    def setStabilizationThreshold(self, arg: float, /) -> None: ...

    def getStabilizationThreshold(self) -> float: ...

    def setWakeCounter(self, arg: float, /) -> None: ...

    def getWakeCounter(self) -> float: ...

    def wakeUp(self) -> None: ...

    def putToSleep(self) -> None: ...

    def setMaxCOMLinearVelocity(self, arg: float, /) -> None: ...

    def getMaxCOMLinearVelocity(self) -> float: ...

    def setMaxCOMAngularVelocity(self, arg: float, /) -> None: ...

    def getMaxCOMAngularVelocity(self) -> float: ...

    def createLink(self, arg0: PxArticulationLink, arg1: PxTransform, /) -> PxArticulationLink: ...

    def release(self) -> None: ...

    def getNbLinks(self) -> int: ...

    def getNbShapes(self) -> int: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

    def getWorldBounds(self, arg: float, /) -> "physx::PxBounds3": ...

    def getAggregate(self) -> PxAggregate: ...

    def setArticulationFlags(self, arg: "physx::PxFlags<physx::PxArticulationFlag::Enum, unsigned char>", /) -> None: ...

    def setArticulationFlag(self, arg0: "physx::PxArticulationFlag::Enum", arg1: bool, /) -> None: ...

    def getArticulationFlags(self) -> "physx::PxFlags<physx::PxArticulationFlag::Enum, unsigned char>": ...

    def getDofs(self) -> int: ...

    def createCache(self) -> "physx::PxArticulationCache": ...

    def getCacheDataSize(self) -> int: ...

    def zeroCache(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def applyCache(self, arg0: "physx::PxArticulationCache", arg1: "physx::PxFlags<physx::PxArticulationCacheFlag::Enum, unsigned int>", arg2: bool, /) -> None: ...

    def copyInternalStateToCache(self, arg0: "physx::PxArticulationCache", arg1: "physx::PxFlags<physx::PxArticulationCacheFlag::Enum, unsigned int>", /) -> None: ...

    def packJointData(self, arg0: float, arg1: float, /) -> None: ...

    def unpackJointData(self, arg0: float, arg1: float, /) -> None: ...

    def commonInit(self) -> None: ...

    def computeGeneralizedGravityForce(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def computeCoriolisAndCentrifugalForce(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def computeGeneralizedExternalForce(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def computeJointAcceleration(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def computeJointForce(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def computeDenseJacobian(self, arg0: "physx::PxArticulationCache", arg1: int, arg2: int, /) -> None: ...

    def computeCoefficientMatrix(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def computeLambda(self, arg0: "physx::PxArticulationCache", arg1: "physx::PxArticulationCache", arg2: float, arg3: int, /) -> bool: ...

    def computeGeneralizedMassMatrix(self, arg: "physx::PxArticulationCache", /) -> None: ...

    def addLoopJoint(self, arg: "physx::PxConstraint", /) -> None: ...

    def removeLoopJoint(self, arg: "physx::PxConstraint", /) -> None: ...

    def getNbLoopJoints(self) -> int: ...

    def getCoefficientMatrixSize(self) -> int: ...

    def setRootGlobalPose(self, arg0: PxTransform, arg1: bool, /) -> None: ...

    def getRootGlobalPose(self) -> PxTransform: ...

    def setRootLinearVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def getRootLinearVelocity(self) -> PxVec3: ...

    def setRootAngularVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def getRootAngularVelocity(self) -> PxVec3: ...

    def getLinkAcceleration(self, arg: int, /) -> "physx::PxSpatialVelocity": ...

    def getGpuArticulationIndex(self) -> int: ...

    def getGPUIndex(self) -> int: ...

    def createSpatialTendon(self) -> "physx::PxArticulationSpatialTendon": ...

    def createFixedTendon(self) -> "physx::PxArticulationFixedTendon": ...

    def getNbSpatialTendons(self) -> int: ...

    def getNbFixedTendons(self) -> int: ...

    def createMimicJoint(self, arg0: "physx::PxArticulationJointReducedCoordinate", arg1: "physx::PxArticulationAxis::Enum", arg2: "physx::PxArticulationJointReducedCoordinate", arg3: "physx::PxArticulationAxis::Enum", arg4: float, arg5: float, /) -> "physx::PxArticulationMimicJoint": ...

    def getNbMimicJoints(self) -> int: ...

    def updateKinematic(self, arg: "physx::PxFlags<physx::PxArticulationKinematicFlag::Enum, unsigned char>", /) -> None: ...

    def getSolverResidual(self) -> "physx::PxResiduals": ...

class PxBaseMaterial:
    def isKindOf(self, arg: str, /) -> bool: ...

class PxBoxController(PxController):
    def getHalfHeight(self) -> float: ...

    def getHalfSideExtent(self) -> float: ...

    def getHalfForwardExtent(self) -> float: ...

    def setHalfHeight(self, arg: float, /) -> bool: ...

    def setHalfSideExtent(self, arg: float, /) -> bool: ...

    def setHalfForwardExtent(self, arg: float, /) -> bool: ...

class PxBoxControllerDesc(PxControllerDesc):
    def setToDefault(self) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def halfHeight(self) -> float: ...

    @halfHeight.setter
    def halfHeight(self, arg: float, /) -> None: ...

    @property
    def halfSideExtent(self) -> float: ...

    @halfSideExtent.setter
    def halfSideExtent(self, arg: float, /) -> None: ...

    @property
    def halfForwardExtent(self) -> float: ...

    @halfForwardExtent.setter
    def halfForwardExtent(self, arg: float, /) -> None: ...

class PxBoxGeometry(PxGeometry):
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, /) -> None: ...

    @overload
    def __init__(self, arg: PxVec3, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def halfExtents(self) -> PxVec3: ...

    @halfExtents.setter
    def halfExtents(self, arg: PxVec3, /) -> None: ...

class PxCapsuleClimbingMode(enum.Enum):
    eEASY = 0

    eCONSTRAINED = 1

    eLAST = 2

class PxCapsuleController(PxController):
    def getRadius(self) -> float: ...

    def setRadius(self, arg: float, /) -> bool: ...

    def getHeight(self) -> float: ...

    def setHeight(self, arg: float, /) -> bool: ...

    def getClimbingMode(self) -> PxCapsuleClimbingMode: ...

    def setClimbingMode(self, arg: PxCapsuleClimbingMode, /) -> bool: ...

class PxCapsuleControllerDesc(PxControllerDesc):
    def setToDefault(self) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def radius(self) -> float: ...

    @radius.setter
    def radius(self, arg: float, /) -> None: ...

    @property
    def height(self) -> float: ...

    @height.setter
    def height(self, arg: float, /) -> None: ...

    @property
    def climbingMode(self) -> PxCapsuleClimbingMode: ...

    @climbingMode.setter
    def climbingMode(self, arg: PxCapsuleClimbingMode, /) -> None: ...

class PxCapsuleGeometry(PxGeometry):
    def __init__(self, arg0: float, arg1: float, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def radius(self) -> float: ...

    @radius.setter
    def radius(self, arg: float, /) -> None: ...

    @property
    def halfHeight(self) -> float: ...

    @halfHeight.setter
    def halfHeight(self, arg: float, /) -> None: ...

class PxCombineMode(enum.Enum):
    eAVERAGE = 0

    eMIN = 1

    eMULTIPLY = 2

    eMAX = 3

class PxController:
    def getType(self) -> PxControllerShapeType: ...

    def release(self) -> None: ...

    def move(self, arg0: PxVec3, arg1: float, arg2: float, arg3: "physx::PxControllerFilters", arg4: "physx::PxObstacleContext", /) -> "physx::PxFlags<physx::PxControllerCollisionFlag::Enum, unsigned char>": ...

    def setPosition(self, arg: "physx::PxVec3T<double>", /) -> bool: ...

    def getPosition(self) -> "physx::PxVec3T<double>": ...

    def setFootPosition(self, arg: "physx::PxVec3T<double>", /) -> bool: ...

    def getFootPosition(self) -> "physx::PxVec3T<double>": ...

    def getActor(self) -> PxRigidDynamic: ...

    def setStepOffset(self, arg: float, /) -> None: ...

    def getStepOffset(self) -> float: ...

    def setNonWalkableMode(self, arg: PxControllerNonWalkableMode, /) -> None: ...

    def getNonWalkableMode(self) -> PxControllerNonWalkableMode: ...

    def getContactOffset(self) -> float: ...

    def setContactOffset(self, arg: float, /) -> None: ...

    def getUpDirection(self) -> PxVec3: ...

    def setUpDirection(self, arg: PxVec3, /) -> None: ...

    def getSlopeLimit(self) -> float: ...

    def setSlopeLimit(self, arg: float, /) -> None: ...

    @overload
    def invalidateCache(self) -> None: ...

    @overload
    def invalidateCache(self, arg: float, /) -> None: ...

    def getScene(self) -> PxScene: ...

    def getState(self, arg: "physx::PxControllerState", /) -> None: ...

    def getStats(self, arg: "physx::PxControllerStats", /) -> None: ...

class PxControllerCollisionFlag(enum.Enum):
    eCOLLISION_SIDES = 1

    eCOLLISION_UP = 2

    eCOLLISION_DOWN = 4

class PxControllerDesc:
    def isValid(self) -> bool: ...

    def getType(self) -> PxControllerShapeType: ...

    @property
    def position(self) -> "physx::PxVec3T<double>": ...

    @position.setter
    def position(self, arg: "physx::PxVec3T<double>", /) -> None: ...

    @property
    def upDirection(self) -> PxVec3: ...

    @upDirection.setter
    def upDirection(self, arg: PxVec3, /) -> None: ...

    @property
    def slopeLimit(self) -> float: ...

    @slopeLimit.setter
    def slopeLimit(self, arg: float, /) -> None: ...

    @property
    def invisibleWallHeight(self) -> float: ...

    @invisibleWallHeight.setter
    def invisibleWallHeight(self, arg: float, /) -> None: ...

    @property
    def maxJumpHeight(self) -> float: ...

    @maxJumpHeight.setter
    def maxJumpHeight(self, arg: float, /) -> None: ...

    @property
    def contactOffset(self) -> float: ...

    @contactOffset.setter
    def contactOffset(self, arg: float, /) -> None: ...

    @property
    def stepOffset(self) -> float: ...

    @stepOffset.setter
    def stepOffset(self, arg: float, /) -> None: ...

    @property
    def density(self) -> float: ...

    @density.setter
    def density(self, arg: float, /) -> None: ...

    @property
    def scaleCoeff(self) -> float: ...

    @scaleCoeff.setter
    def scaleCoeff(self, arg: float, /) -> None: ...

    @property
    def volumeGrowth(self) -> float: ...

    @volumeGrowth.setter
    def volumeGrowth(self, arg: float, /) -> None: ...

    @property
    def reportCallback(self) -> "physx::PxUserControllerHitReport": ...

    @reportCallback.setter
    def reportCallback(self, arg: "physx::PxUserControllerHitReport", /) -> None: ...

    @property
    def behaviorCallback(self) -> "physx::PxControllerBehaviorCallback": ...

    @behaviorCallback.setter
    def behaviorCallback(self, arg: "physx::PxControllerBehaviorCallback", /) -> None: ...

    @property
    def nonWalkableMode(self) -> PxControllerNonWalkableMode: ...

    @nonWalkableMode.setter
    def nonWalkableMode(self, arg: PxControllerNonWalkableMode, /) -> None: ...

    @property
    def material(self) -> PxMaterial: ...

    @material.setter
    def material(self, arg: PxMaterial, /) -> None: ...

    @property
    def registerDeletionListener(self) -> bool: ...

    @registerDeletionListener.setter
    def registerDeletionListener(self, arg: bool, /) -> None: ...

    @property
    def clientID(self) -> int: ...

    @clientID.setter
    def clientID(self, arg: int, /) -> None: ...

class PxControllerManager:
    def release(self) -> None: ...

    def getScene(self) -> PxScene: ...

    def getNbControllers(self) -> int: ...

    def createController(self, arg: PxControllerDesc, /) -> PxController: ...

    def purgeControllers(self) -> None: ...

    def getRenderBuffer(self) -> "physx::PxRenderBuffer": ...

    def setDebugRenderingFlags(self, arg: "physx::PxFlags<physx::PxControllerDebugRenderFlag::Enum, unsigned int>", /) -> None: ...

    def getNbObstacleContexts(self) -> int: ...

    def getObstacleContext(self, arg: int, /) -> "physx::PxObstacleContext": ...

    def createObstacleContext(self) -> "physx::PxObstacleContext": ...

    def computeInteractions(self, arg0: float, arg1: "physx::PxControllerFilterCallback", /) -> None: ...

    def setTessellation(self, arg0: bool, arg1: float, /) -> None: ...

    def setOverlapRecoveryModule(self, arg: bool, /) -> None: ...

    def setPreciseSweeps(self, arg: bool, /) -> None: ...

    def setPreventVerticalSlidingAgainstCeiling(self, arg: bool, /) -> None: ...

    def shiftOrigin(self, arg: PxVec3, /) -> None: ...

class PxControllerNonWalkableMode(enum.Enum):
    ePREVENT_CLIMBING = 0

    ePREVENT_CLIMBING_AND_FORCE_SLIDING = 1

class PxControllerShapeType(enum.Enum):
    eBOX = 0

    eCAPSULE = 1

class PxConvexMesh:
    def getNbVertices(self) -> int: ...

    def getVertices(self) -> PxVec3: ...

    def getIndexBuffer(self) -> int: ...

    def getNbPolygons(self) -> int: ...

    def getPolygonData(self, arg0: int, arg1: "physx::PxHullPolygon", /) -> bool: ...

    def release(self) -> None: ...

    def getMassInformation(self, arg0: float, arg1: PxMat33, arg2: PxVec3, /) -> None: ...

    def getLocalBounds(self) -> "physx::PxBounds3": ...

    def getSDF(self) -> float: ...

    def isGpuCompatible(self) -> bool: ...

class PxConvexMeshGeometry(PxGeometry):
    def __init__(self, arg0: PxConvexMesh, arg1: "physx::PxMeshScale", arg2: "physx::PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>", /) -> None: ...

    def isValid(self) -> bool: ...

class PxD6Joint(PxJoint):
    def setMotion(self, arg0: "physx::PxD6Axis::Enum", arg1: "physx::PxD6Motion::Enum", /) -> None: ...

    def getMotion(self, arg: "physx::PxD6Axis::Enum", /) -> "physx::PxD6Motion::Enum": ...

    def getTwistAngle(self) -> float: ...

    def getSwingYAngle(self) -> float: ...

    def getSwingZAngle(self) -> float: ...

    def setDistanceLimit(self, arg: "physx::PxJointLinearLimit", /) -> None: ...

    def getDistanceLimit(self) -> "physx::PxJointLinearLimit": ...

    def setLinearLimit(self, arg0: "physx::PxD6Axis::Enum", arg1: "physx::PxJointLinearLimitPair", /) -> None: ...

    def getLinearLimit(self, arg: "physx::PxD6Axis::Enum", /) -> "physx::PxJointLinearLimitPair": ...

    def setTwistLimit(self, arg: "physx::PxJointAngularLimitPair", /) -> None: ...

    def getTwistLimit(self) -> "physx::PxJointAngularLimitPair": ...

    def setSwingLimit(self, arg: "physx::PxJointLimitCone", /) -> None: ...

    def getSwingLimit(self) -> "physx::PxJointLimitCone": ...

    def setPyramidSwingLimit(self, arg: "physx::PxJointLimitPyramid", /) -> None: ...

    def getPyramidSwingLimit(self) -> "physx::PxJointLimitPyramid": ...

    def setDrive(self, arg0: "physx::PxD6Drive::Enum", arg1: "physx::PxD6JointDrive", /) -> None: ...

    def getDrive(self, arg: "physx::PxD6Drive::Enum", /) -> "physx::PxD6JointDrive": ...

    def setDrivePosition(self, arg0: PxTransform, arg1: bool, /) -> None: ...

    def getDrivePosition(self) -> PxTransform: ...

    def setDriveVelocity(self, arg0: PxVec3, arg1: PxVec3, arg2: bool, /) -> None: ...

    def getDriveVelocity(self, arg0: PxVec3, arg1: PxVec3, /) -> None: ...

class PxDistanceJoint(PxJoint):
    def getDistance(self) -> float: ...

    def setMinDistance(self, arg: float, /) -> None: ...

    def getMinDistance(self) -> float: ...

    def setMaxDistance(self, arg: float, /) -> None: ...

    def getMaxDistance(self) -> float: ...

    def setTolerance(self, arg: float, /) -> None: ...

    def getTolerance(self) -> float: ...

    def setStiffness(self, arg: float, /) -> None: ...

    def getStiffness(self) -> float: ...

    def setDamping(self, arg: float, /) -> None: ...

    def getDamping(self) -> float: ...

    def setDistanceJointFlags(self, arg: "physx::PxFlags<physx::PxDistanceJointFlag::Enum, unsigned short>", /) -> None: ...

    def setDistanceJointFlag(self, arg0: "physx::PxDistanceJointFlag::Enum", arg1: bool, /) -> None: ...

class PxEMPTY(enum.Enum):
    PxEmpty = 0

class PxFEMClothMaterial(PxFEMMaterial):
    def setThickness(self, arg: float, /) -> None: ...

    def getThickness(self) -> float: ...

class PxFEMMaterial(PxBaseMaterial):
    def setYoungsModulus(self, arg: float, /) -> None: ...

    def getYoungsModulus(self) -> float: ...

    def setPoissons(self, arg: float, /) -> None: ...

    def getPoissons(self) -> float: ...

    def setDynamicFriction(self, arg: float, /) -> None: ...

    def getDynamicFriction(self) -> float: ...

class PxFEMSoftBodyMaterial(PxFEMMaterial):
    def setDamping(self, arg: float, /) -> None: ...

    def getDamping(self) -> float: ...

    def setDampingScale(self, arg: float, /) -> None: ...

    def getDampingScale(self) -> float: ...

    def setMaterialModel(self, arg: PxFEMSoftBodyMaterialModel, /) -> None: ...

    def getMaterialModel(self) -> PxFEMSoftBodyMaterialModel: ...

class PxFEMSoftBodyMaterialModel(enum.Enum):
    eCO_ROTATIONAL = 0

    eNEO_HOOKEAN = 1

class PxFixedJoint(PxJoint):
    pass

class PxForceMode(enum.Enum):
    eFORCE = 0

    eIMPULSE = 1

    eVELOCITY_CHANGE = 2

    eACCELERATION = 3

class PxFoundation:
    def release(self) -> None: ...

    def setErrorLevel(self, arg: "physx::PxErrorCode::Enum", /) -> None: ...

    def getErrorLevel(self) -> "physx::PxErrorCode::Enum": ...

    def getReportAllocationNames(self) -> bool: ...

    def setReportAllocationNames(self, arg: bool, /) -> None: ...

class PxGearJoint(PxJoint):
    def setHinges(self, arg0: "physx::PxBase", arg1: "physx::PxBase", /) -> bool: ...

    def setGearRatio(self, arg: float, /) -> None: ...

    def getGearRatio(self) -> float: ...

class PxGeometry:
    def getType(self) -> "physx::PxGeometryType::Enum": ...

class PxHairSystemGeometry(PxGeometry):
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

class PxHeightField:
    def release(self) -> None: ...

    def modifySamples(self, arg0: int, arg1: int, arg2: "physx::PxHeightFieldDesc", arg3: bool, /) -> bool: ...

    def getNbRows(self) -> int: ...

    def getNbColumns(self) -> int: ...

    def getFormat(self) -> "physx::PxHeightFieldFormat::Enum": ...

    def getSampleStride(self) -> int: ...

    def getConvexEdgeThreshold(self) -> float: ...

    def getFlags(self) -> "physx::PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>": ...

    def getHeight(self, arg0: float, arg1: float, /) -> float: ...

    def getTriangleMaterialIndex(self, arg: int, /) -> int: ...

    def getTriangleNormal(self, arg: int, /) -> PxVec3: ...

    def getSample(self, arg0: int, arg1: int, /) -> "physx::PxHeightFieldSample": ...

    def getTimestamp(self) -> int: ...

class PxHeightFieldGeometry(PxGeometry):
    def __init__(self, arg0: PxHeightField, arg1: "physx::PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>", arg2: float, arg3: float, arg4: float, /) -> None: ...

    def isValid(self) -> bool: ...

class PxHitFlag(enum.Enum):
    ePOSITION = 1

    eNORMAL = 2

    eUV = 8

    eASSUME_NO_INITIAL_OVERLAP = 16

    eANY_HIT = 32

    eMESH_MULTIPLE = 64

    eMESH_ANY = 32

    eMESH_BOTH_SIDES = 128

    ePRECISE_SWEEP = 256

    eMTD = 512

    eFACE_INDEX = 1024

    eDEFAULT = 1027

class PxIDENTITY(enum.Enum):
    PxIdentity = 0

class PxInputData(PxInputStream):
    def getLength(self) -> int: ...

    def seek(self, arg: int, /) -> None: ...

    def tell(self) -> int: ...

class PxInputStream:
    def write(self, arg: Annotated[ArrayLike, dict(dtype='uint8')], /) -> int: ...

class PxJoint:
    def setActors(self, arg0: PxRigidActor, arg1: PxRigidActor, /) -> None: ...

    def setLocalPose(self, arg0: "physx::PxJointActorIndex::Enum", arg1: PxTransform, /) -> None: ...

    def getLocalPose(self, arg: "physx::PxJointActorIndex::Enum", /) -> PxTransform: ...

    def getRelativeTransform(self) -> PxTransform: ...

    def getRelativeLinearVelocity(self) -> PxVec3: ...

    def getRelativeAngularVelocity(self) -> PxVec3: ...

    def setBreakForce(self, arg0: float, arg1: float, /) -> None: ...

    def setConstraintFlags(self, arg: "physx::PxFlags<physx::PxConstraintFlag::Enum, unsigned short>", /) -> None: ...

    def setConstraintFlag(self, arg0: "physx::PxConstraintFlag::Enum", arg1: bool, /) -> None: ...

    def getConstraintFlags(self) -> "physx::PxFlags<physx::PxConstraintFlag::Enum, unsigned short>": ...

    def setInvMassScale0(self, arg: float, /) -> None: ...

    def getInvMassScale0(self) -> float: ...

    def setInvInertiaScale0(self, arg: float, /) -> None: ...

    def getInvInertiaScale0(self) -> float: ...

    def setInvMassScale1(self, arg: float, /) -> None: ...

    def getInvMassScale1(self) -> float: ...

    def setInvInertiaScale1(self, arg: float, /) -> None: ...

    def getInvInertiaScale1(self) -> float: ...

    def getConstraint(self) -> "physx::PxConstraint": ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

    def release(self) -> None: ...

    def getScene(self) -> PxScene: ...

class PxMat33:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, col0: PxVec3, col1: PxVec3, col2: PxVec3) -> None: ...

    @overload
    def __init__(self, v: float) -> None: ...

    @overload
    def __init__(self) -> PxMat33: ...

    @overload
    def __init__(self, q: PxQuat) -> None: ...

    @staticmethod
    def createDiagonal(d: PxVec3) -> PxMat33: ...

    @staticmethod
    def outer(a: PxVec3, b: PxVec3) -> PxMat33: ...

    def getTranspose(self) -> PxMat33: ...

    def getInverse(self) -> PxMat33: ...

    def getDeterminant(self) -> float: ...

    def transform(self, other: PxVec3) -> PxVec3: ...

    def transformTranspose(self, other: PxVec3) -> PxVec3: ...

    def __iadd__(self, arg: PxMat33, /) -> PxMat33: ...

    def __add__(self, arg: PxMat33, /) -> PxMat33: ...

    def __isub__(self, arg: PxMat33, /) -> PxMat33: ...

    def __sub__(self, arg: PxMat33, /) -> PxMat33: ...

    @overload
    def __imul__(self, arg: PxMat33, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxMat33, /) -> PxMat33: ...

    @overload
    def __mul__(self, arg: float, /) -> PxMat33: ...

    def __neg__(self) -> PxMat33: ...

    def __getitem__(self, arg: tuple[int, int], /) -> float: ...

    def __setitem__(self, arg0: tuple[int, int], arg1: float, /) -> None: ...

class PxMat44:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, col0: PxVec4, col1: PxVec4, col2: PxVec4, col3: PxVec4) -> None: ...

    @overload
    def __init__(self, v: float) -> None: ...

    @overload
    def __init__(self) -> PxMat44: ...

    @overload
    def __init__(self, q: PxQuat) -> None: ...

    @overload
    def __init__(self, diagonal: PxVec4) -> None: ...

    @overload
    def __init__(self, axes: PxMat33, position: PxVec3) -> None: ...

    def getTranspose(self) -> PxMat44: ...

    @overload
    def transform(self, other: PxVec4) -> PxVec4: ...

    @overload
    def transform(self, other: PxVec3) -> PxVec3: ...

    @overload
    def rotate(self, other: PxVec4) -> PxVec4: ...

    @overload
    def rotate(self, other: PxVec3) -> PxVec3: ...

    def getBasis(self, num: int) -> PxVec3: ...

    def getPosition(self) -> PxVec3: ...

    def setPosition(self, position: PxVec3) -> None: ...

    def scale(self, p: PxVec4) -> None: ...

    def inverseRT(self) -> PxMat44: ...

    def isFinite(self) -> bool: ...

    def __iadd__(self, arg: PxMat44, /) -> PxMat44: ...

    def __add__(self, arg: PxMat44, /) -> PxMat44: ...

    def __isub__(self, arg: PxMat44, /) -> PxMat44: ...

    def __sub__(self, arg: PxMat44, /) -> PxMat44: ...

    @overload
    def __imul__(self, arg: PxMat44, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxMat44, /) -> PxMat44: ...

    @overload
    def __mul__(self, arg: float, /) -> PxMat44: ...

    def __neg__(self) -> PxMat44: ...

    def __getitem__(self, arg: tuple[int, int], /) -> float: ...

    def __setitem__(self, arg0: tuple[int, int], arg1: float, /) -> None: ...

class PxMaterial(PxBaseMaterial):
    def setDynamicFriction(self, coef: float) -> None: ...

    def getDynamicFriction(self) -> float: ...

    def setStaticFriction(self, coef: float) -> None: ...

    def getStaticFriction(self) -> float: ...

    def setRestitution(self, rest: float) -> None: ...

    def getRestitution(self) -> float: ...

    def setDamping(self, damping: float) -> None: ...

    def getDamping(self) -> float: ...

    def setFrictionCombineMode(self, combMode: PxCombineMode) -> None: ...

    def getFrictionCombineMode(self) -> PxCombineMode: ...

    def setRestitutionCombineMode(self, combMode: PxCombineMode) -> None: ...

    def getRestitutionCombineMode(self) -> PxCombineMode: ...

    def setDampingCombineMode(self, combMode: PxCombineMode) -> None: ...

    def getDampingCombineMode(self) -> PxCombineMode: ...

class PxOutputStream:
    def write(self, arg: Annotated[ArrayLike, dict(dtype='uint8')], /) -> int: ...

class PxPBDMaterial(PxBaseMaterial):
    def setFriction(self, arg: float, /) -> None: ...

    def getFriction(self) -> float: ...

    def setDamping(self, arg: float, /) -> None: ...

    def getDamping(self) -> float: ...

    def setAdhesion(self, arg: float, /) -> None: ...

    def getAdhesion(self) -> float: ...

    def setGravityScale(self, arg: float, /) -> None: ...

    def getGravityScale(self) -> float: ...

    def setAdhesionRadiusScale(self, arg: float, /) -> None: ...

    def getAdhesionRadiusScale(self) -> float: ...

    def setViscosity(self, arg: float, /) -> None: ...

    def getViscosity(self) -> float: ...

    def setVorticityConfinement(self, arg: float, /) -> None: ...

    def getVorticityConfinement(self) -> float: ...

    def setSurfaceTension(self, arg: float, /) -> None: ...

    def getSurfaceTension(self) -> float: ...

    def setCohesion(self, arg: float, /) -> None: ...

    def getCohesion(self) -> float: ...

    def setLift(self, arg: float, /) -> None: ...

    def getLift(self) -> float: ...

    def setDrag(self, arg: float, /) -> None: ...

    def getDrag(self) -> float: ...

    def setCFLCoefficient(self, arg: float, /) -> None: ...

    def getCFLCoefficient(self) -> float: ...

    def setParticleFrictionScale(self, arg: float, /) -> None: ...

    def getParticleFrictionScale(self) -> float: ...

    def setParticleAdhesionScale(self, arg: float, /) -> None: ...

    def getParticleAdhesionScale(self) -> float: ...

class PxPBDParticleSystem(PxActor):
    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSimulationFilterData(self) -> "physx::PxFilterData": ...

    def setSimulationFilterData(self, arg: "physx::PxFilterData", /) -> None: ...

    def setParticleFlag(self, arg0: "physx::PxParticleFlag::Enum", arg1: bool, /) -> None: ...

    def setMaxDepenetrationVelocity(self, arg: float, /) -> None: ...

    def getMaxDepenetrationVelocity(self) -> float: ...

    def setMaxVelocity(self, arg: float, /) -> None: ...

    def getMaxVelocity(self) -> float: ...

    def setRestOffset(self, arg: float, /) -> None: ...

    def getRestOffset(self) -> float: ...

    def setContactOffset(self, arg: float, /) -> None: ...

    def getContactOffset(self) -> float: ...

    def setParticleContactOffset(self, arg: float, /) -> None: ...

    def getParticleContactOffset(self) -> float: ...

    def setSolidRestOffset(self, arg: float, /) -> None: ...

    def getSolidRestOffset(self) -> float: ...

    def addRigidAttachment(self, arg: PxRigidActor, /) -> None: ...

    def removeRigidAttachment(self, arg: PxRigidActor, /) -> None: ...

    def enableCCD(self, arg: bool, /) -> None: ...

    def setParticleLockFlag(self, arg0: "physx::PxParticleLockFlag::Enum", arg1: bool, /) -> None: ...

    def createPhase(self, arg0: PxPBDMaterial, arg1: "physx::PxFlags<physx::PxParticlePhaseFlag::Enum, unsigned int>", /) -> int: ...

    def getNbParticleMaterials(self) -> int: ...

    def addParticleBuffer(self, arg: "physx::PxParticleBuffer", /) -> None: ...

    def removeParticleBuffer(self, arg: "physx::PxParticleBuffer", /) -> None: ...

    def getGpuParticleSystemIndex(self) -> int: ...

    def setWind(self, arg: PxVec3, /) -> None: ...

    def getWind(self) -> PxVec3: ...

    def setFluidBoundaryDensityScale(self, arg: float, /) -> None: ...

    def getFluidBoundaryDensityScale(self) -> float: ...

    def setFluidRestOffset(self, arg: float, /) -> None: ...

    def getFluidRestOffset(self) -> float: ...

    def setGridSizeX(self, arg: int, /) -> None: ...

    def getGridSizeX(self) -> int: ...

    def setGridSizeY(self, arg: int, /) -> None: ...

    def getGridSizeY(self) -> int: ...

    def setGridSizeZ(self, arg: int, /) -> None: ...

    def getGridSizeZ(self) -> int: ...

class PxParticleSystemGeometry(PxGeometry):
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

class PxPhysics:
    def getFoundation(self) -> PxFoundation: ...

    def createAggregate(self, arg0: int, arg1: int, arg2: int, /) -> PxAggregate: ...

    def getTolerancesScale(self) -> PxTolerancesScale: ...

    def createTriangleMesh(self, arg: PxInputStream, /) -> PxTriangleMesh: ...

    def getNbTriangleMeshes(self) -> int: ...

    def createTetrahedronMesh(self, arg: PxInputStream, /) -> PxTetrahedronMesh: ...

    def createSoftBodyMesh(self, arg: PxInputStream, /) -> PxSoftBodyMesh: ...

    def getNbTetrahedronMeshes(self) -> int: ...

    def createHeightField(self, arg: PxInputStream, /) -> PxHeightField: ...

    def getNbHeightFields(self) -> int: ...

    def createConvexMesh(self, arg: PxInputStream, /) -> PxConvexMesh: ...

    def getNbConvexMeshes(self) -> int: ...

    def getNbBVHs(self) -> int: ...

    def createScene(self, arg: "physx::PxSceneDesc", /) -> PxScene: ...

    def getNbScenes(self) -> int: ...

    def createRigidStatic(self, arg: PxTransform, /) -> PxRigidStatic: ...

    def createRigidDynamic(self, arg: PxTransform, /) -> PxRigidDynamic: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: PxMaterial, arg2: bool, arg3: "physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>", /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: PxFEMSoftBodyMaterial, arg2: bool, arg3: "physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>", /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: Sequence[PxMaterial], arg2: bool, arg3: "physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>", /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: Sequence[PxFEMSoftBodyMaterial], arg2: bool, arg3: "physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>", /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: Sequence[PxFEMClothMaterial], arg2: bool, arg3: "physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>", /) -> PxShape: ...

    def getNbShapes(self) -> int: ...

    def createArticulationReducedCoordinate(self) -> PxArticulationReducedCoordinate: ...

    def createMaterial(self, arg0: float, arg1: float, arg2: float, /) -> PxMaterial: ...

    def getNbMaterials(self) -> int: ...

    def createFEMSoftBodyMaterial(self, arg0: float, arg1: float, arg2: float, /) -> PxFEMSoftBodyMaterial: ...

    def getNbFEMSoftBodyMaterials(self) -> int: ...

    def createFEMClothMaterial(self, arg0: float, arg1: float, arg2: float, arg3: float, /) -> PxFEMClothMaterial: ...

    def getNbFEMClothMaterials(self) -> int: ...

    def createPBDMaterial(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, /) -> PxPBDMaterial: ...

    def getNbPBDMaterials(self) -> int: ...

class PxPlaneGeometry(PxGeometry):
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

class PxPrismaticJoint(PxJoint):
    def getPosition(self) -> float: ...

    def getVelocity(self) -> float: ...

    def setLimit(self, arg: "physx::PxJointLinearLimitPair", /) -> None: ...

    def getLimit(self) -> "physx::PxJointLinearLimitPair": ...

    def setPrismaticJointFlags(self, arg: "physx::PxFlags<physx::PxPrismaticJointFlag::Enum, unsigned short>", /) -> None: ...

    def setPrismaticJointFlag(self, arg0: "physx::PxPrismaticJointFlag::Enum", arg1: bool, /) -> None: ...

    def getPrismaticJointFlags(self) -> "physx::PxFlags<physx::PxPrismaticJointFlag::Enum, unsigned short>": ...

class PxQuat:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float, nw: float) -> None: ...

    @overload
    def __init__(self, angleRadians: float, unitAxis: PxVec3) -> None: ...

    @overload
    def __init__(self, m: PxMat33) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    def isIdentity(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isUnit(self) -> bool: ...

    def isSane(self) -> bool: ...

    def toRadiansAndUnitAxis(self, angle: float, axis: PxVec3) -> None: ...

    @overload
    def getAngle(self) -> float: ...

    @overload
    def getAngle(self, arg: PxQuat, /) -> float: ...

    def magnitudeSquared(self) -> float: ...

    def dot(self, v: PxQuat) -> float: ...

    def getNormalized(self) -> PxQuat: ...

    def magnitude(self) -> float: ...

    def normalize(self) -> float: ...

    def getConjugate(self) -> PxQuat: ...

    def getImaginaryPart(self) -> PxVec3: ...

    def getBasisVector0(self) -> PxVec3: ...

    def getBasisVector1(self) -> PxVec3: ...

    def getBasisVector2(self) -> PxVec3: ...

    def rotate(self, v: PxVec3) -> PxVec3: ...

    def rotateInv(self, v: PxVec3) -> PxVec3: ...

    def __iadd__(self, arg: PxQuat, /) -> PxQuat: ...

    def __add__(self, arg: PxQuat, /) -> PxQuat: ...

    def __isub__(self, arg: PxQuat, /) -> PxQuat: ...

    def __sub__(self, arg: PxQuat, /) -> PxQuat: ...

    @overload
    def __imul__(self, arg: PxQuat, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxQuat, /) -> PxQuat: ...

    @overload
    def __mul__(self, arg: float, /) -> PxQuat: ...

    def __neg__(self) -> PxQuat: ...

    def __eq__(self, arg: PxQuat, /) -> bool: ...

class PxQueryFlag(enum.Enum):
    eSTATIC = 1

    eDYNAMIC = 2

    ePREFILTER = 4

    ePOSTFILTER = 8

    eANY_HIT = 16

    eNO_BLOCK = 32

    eBATCH_QUERY_LEGACY_BEHAVIOUR = 64

    eDISABLE_HARDCODED_FILTER = 64

class PxQueryHitType(enum.Enum):
    eNONE = 0

    eBLOCK = 2

    eTOUCH = 1

class PxRackAndPinionJoint(PxJoint):
    def setJoints(self, arg0: "physx::PxBase", arg1: "physx::PxBase", /) -> bool: ...

    def setRatio(self, arg: float, /) -> None: ...

    def getRatio(self) -> float: ...

    def setData(self, arg0: int, arg1: int, arg2: float, /) -> bool: ...

class PxRevoluteJoint(PxJoint):
    def getAngle(self) -> float: ...

    def getVelocity(self) -> float: ...

    def setLimit(self, arg: "physx::PxJointAngularLimitPair", /) -> None: ...

    def getLimit(self) -> "physx::PxJointAngularLimitPair": ...

    def setDriveVelocity(self, arg0: float, arg1: bool, /) -> None: ...

    def getDriveVelocity(self) -> float: ...

    def setDriveForceLimit(self, arg: float, /) -> None: ...

    def getDriveForceLimit(self) -> float: ...

    def setDriveGearRatio(self, arg: float, /) -> None: ...

    def getDriveGearRatio(self) -> float: ...

    def setRevoluteJointFlags(self, arg: "physx::PxFlags<physx::PxRevoluteJointFlag::Enum, unsigned short>", /) -> None: ...

    def setRevoluteJointFlag(self, arg0: "physx::PxRevoluteJointFlag::Enum", arg1: bool, /) -> None: ...

    def getRevoluteJointFlags(self) -> "physx::PxFlags<physx::PxRevoluteJointFlag::Enum, unsigned short>": ...

class PxRigidActor(PxActor):
    def release(self) -> None: ...

    def getInternalActorIndex(self) -> int: ...

    def getGlobalPose(self) -> PxTransform: ...

    def setGlobalPose(self, arg0: PxTransform, arg1: bool, /) -> None: ...

    def attachShape(self, arg: PxShape, /) -> bool: ...

    def detachShape(self, arg0: PxShape, arg1: bool, /) -> None: ...

    def getNbShapes(self) -> int: ...

    def getNbConstraints(self) -> int: ...

class PxRigidBody(PxRigidActor):
    def setCMassLocalPose(self, arg: PxTransform, /) -> None: ...

    def getCMassLocalPose(self) -> PxTransform: ...

    def setMass(self, arg: float, /) -> None: ...

    def getMass(self) -> float: ...

    def getInvMass(self) -> float: ...

    def setMassSpaceInertiaTensor(self, arg: PxVec3, /) -> None: ...

    def getMassSpaceInertiaTensor(self) -> PxVec3: ...

    def getMassSpaceInvInertiaTensor(self) -> PxVec3: ...

    def setLinearDamping(self, arg: float, /) -> None: ...

    def getLinearDamping(self) -> float: ...

    def setAngularDamping(self, arg: float, /) -> None: ...

    def getAngularDamping(self) -> float: ...

    def getLinearVelocity(self) -> PxVec3: ...

    def getAngularVelocity(self) -> PxVec3: ...

    def setMaxLinearVelocity(self, arg: float, /) -> None: ...

    def getMaxLinearVelocity(self) -> float: ...

    def setMaxAngularVelocity(self, arg: float, /) -> None: ...

    def getMaxAngularVelocity(self) -> float: ...

    def getLinearAcceleration(self) -> PxVec3: ...

    def getAngularAcceleration(self) -> PxVec3: ...

    def addForce(self, arg0: PxVec3, arg1: PxForceMode, arg2: bool, /) -> None: ...

    def addTorque(self, arg0: PxVec3, arg1: PxForceMode, arg2: bool, /) -> None: ...

    def clearForce(self, arg: PxForceMode, /) -> None: ...

    def clearTorque(self, arg: PxForceMode, /) -> None: ...

    def setForceAndTorque(self, arg0: PxVec3, arg1: PxVec3, arg2: PxForceMode, /) -> None: ...

    def setRigidBodyFlag(self, arg0: PxRigidBodyFlag, arg1: bool, /) -> None: ...

    def setMinCCDAdvanceCoefficient(self, arg: float, /) -> None: ...

    def getMinCCDAdvanceCoefficient(self) -> float: ...

    def setMaxDepenetrationVelocity(self, arg: float, /) -> None: ...

    def getMaxDepenetrationVelocity(self) -> float: ...

    def setMaxContactImpulse(self, arg: float, /) -> None: ...

    def getMaxContactImpulse(self) -> float: ...

    def setContactSlopCoefficient(self, arg: float, /) -> None: ...

    def getContactSlopCoefficient(self) -> float: ...

class PxRigidBodyFlag(enum.Enum):
    eKINEMATIC = 1

    eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = 2

    eENABLE_CCD = 4

    eENABLE_CCD_FRICTION = 8

    eENABLE_SPECULATIVE_CCD = 16

    eENABLE_POSE_INTEGRATION_PREVIEW = 32

    eENABLE_CCD_MAX_CONTACT_IMPULSE = 64

    eRETAIN_ACCELERATIONS = 128

    eFORCE_KINE_KINE_NOTIFICATIONS = 256

    eFORCE_STATIC_KINE_NOTIFICATIONS = 512

    eENABLE_GYROSCOPIC_FORCES = 1024

class PxRigidDynamic(PxRigidBody):
    def setKinematicTarget(self, arg: PxTransform, /) -> None: ...

    def getKinematicTarget(self, arg: PxTransform, /) -> bool: ...

    def isSleeping(self) -> bool: ...

    def setSleepThreshold(self, arg: float, /) -> None: ...

    def getSleepThreshold(self) -> float: ...

    def setStabilizationThreshold(self, arg: float, /) -> None: ...

    def getStabilizationThreshold(self) -> float: ...

    def setWakeCounter(self, arg: float, /) -> None: ...

    def getWakeCounter(self) -> float: ...

    def wakeUp(self) -> None: ...

    def putToSleep(self) -> None: ...

    def getRigidDynamicLockFlags(self) -> "physx::PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned char>": ...

    def setRigidDynamicLockFlag(self, arg0: "physx::PxRigidDynamicLockFlag::Enum", arg1: bool, /) -> None: ...

    def setRigidDynamicLockFlags(self, arg: "physx::PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned char>", /) -> None: ...

    def getLinearVelocity(self) -> PxVec3: ...

    def setLinearVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def getAngularVelocity(self) -> PxVec3: ...

    def setAngularVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getContactReportThreshold(self) -> float: ...

    def setContactReportThreshold(self, arg: float, /) -> None: ...

    def getGPUIndex(self) -> int: ...

class PxRigidStatic(PxRigidActor):
    pass

class PxScene:
    def release(self) -> None: ...

    def setFlag(self, arg0: PxSceneFlag, arg1: bool, /) -> None: ...

    def getFlags(self) -> "physx::PxFlags<physx::PxSceneFlag::Enum, unsigned int>": ...

    def setLimits(self, arg: "physx::PxSceneLimits", /) -> None: ...

    def getLimits(self) -> "physx::PxSceneLimits": ...

    def getPhysics(self) -> PxPhysics: ...

    def getTimestamp(self) -> int: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

    def addArticulation(self, arg: PxArticulationReducedCoordinate, /) -> bool: ...

    def removeArticulation(self, arg0: PxArticulationReducedCoordinate, arg1: bool, /) -> None: ...

    def addActor(self, arg0: PxActor, arg1: "physx::PxBVH", /) -> bool: ...

    def addActors(self, arg: Sequence[PxActor], /) -> None: ...

    def removeActor(self, arg0: PxActor, arg1: bool, /) -> None: ...

    def removeActors(self, arg0: Sequence[PxActor], arg1: bool, /) -> None: ...

    def addAggregate(self, arg: PxAggregate, /) -> bool: ...

    def removeAggregate(self, arg0: PxAggregate, arg1: bool, /) -> None: ...

    def addCollection(self, arg: "physx::PxCollection", /) -> bool: ...

    def getNbActors(self, arg: "physx::PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>", /) -> int: ...

    def getNbSoftBodies(self) -> int: ...

    def getNbParticleSystems(self, arg: "physx::PxParticleSolverType::Enum", /) -> int: ...

    def getNbPBDParticleSystems(self) -> int: ...

    def getNbFEMCloths(self) -> int: ...

    def getNbHairSystems(self) -> int: ...

    def getNbArticulations(self) -> int: ...

    def getNbConstraints(self) -> int: ...

    def getNbAggregates(self) -> int: ...

class PxSceneFlag(enum.Enum):
    eENABLE_ACTIVE_ACTORS  = 1

    eENABLE_CCD = 2

    eDISABLE_CCD_RESWEEP = 4

    eENABLE_PCM = 64

    eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = 128

    eDISABLE_CONTACT_CACHE = 256

    eREQUIRE_RW_LOCK = 512

    eENABLE_STABILIZATION = 1024

    eENABLE_AVERAGE_POINT = 2048

    eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS = 4096

    eENABLE_GPU_DYNAMICS = 8192

    eENABLE_ENHANCED_DETERMINISM = 16384

    eENABLE_FRICTION_EVERY_ITERATION = 32768

    eENABLE_EXTERNAL_FORCES_EVERY_ITERATION_TGS = 65536

    eENABLE_DIRECT_GPU_API = 131072

    eENABLE_BODY_ACCELERATIONS = 262144

    eENABLE_SOLVER_RESIDUAL_REPORTING = 524288

class PxShape:
    def release(self) -> None: ...

    def setGeometry(self, arg: PxGeometry, /) -> None: ...

    def getGeometry(self) -> PxGeometry: ...

    def getActor(self) -> PxRigidActor: ...

    def setLocalPose(self, arg: PxTransform, /) -> None: ...

    def getLocalPose(self) -> PxTransform: ...

    def setSimulationFilterData(self, arg: "physx::PxFilterData", /) -> None: ...

    def getSimulationFilterData(self) -> "physx::PxFilterData": ...

    def setQueryFilterData(self, arg: "physx::PxFilterData", /) -> None: ...

    def getQueryFilterData(self) -> "physx::PxFilterData": ...

    def getNbMaterials(self) -> int: ...

    def setContactOffset(self, arg: float, /) -> None: ...

    def getContactOffset(self) -> float: ...

    def setRestOffset(self, arg: float, /) -> None: ...

    def getRestOffset(self) -> float: ...

    def setDensityForFluid(self, arg: float, /) -> None: ...

    def getDensityForFluid(self) -> float: ...

    def setTorsionalPatchRadius(self, arg: float, /) -> None: ...

    def getTorsionalPatchRadius(self) -> float: ...

    def setMinTorsionalPatchRadius(self, arg: float, /) -> None: ...

    def getMinTorsionalPatchRadius(self) -> float: ...

    def getGPUIndex(self) -> int: ...

    def setFlag(self, arg0: PxShapeFlag, arg1: bool, /) -> None: ...

    def setFlags(self, arg: "physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>", /) -> None: ...

    def getFlags(self) -> "physx::PxFlags<physx::PxShapeFlag::Enum, unsigned char>": ...

    def isExclusive(self) -> bool: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

class PxShapeFlag(enum.Enum):
    eSIMULATION_SHAPE = 1

    eSCENE_QUERY_SHAPE = 2

    eTRIGGER_SHAPE = 4

    eVISUALIZATION = 8

class PxSoftBody(PxActor):
    def setSoftBodyFlag(self, arg0: "physx::PxSoftBodyFlag::Enum", arg1: bool, /) -> None: ...

    def setParameter(self, arg: "physx::PxFEMParameters", /) -> None: ...

    def getParameter(self) -> "physx::PxFEMParameters": ...

    def getPositionInvMassBufferD(self) -> PxVec4: ...

    def getRestPositionBufferD(self) -> PxVec4: ...

    def getSimPositionInvMassBufferD(self) -> PxVec4: ...

    def getSimVelocityBufferD(self) -> PxVec4: ...

    def markDirty(self, arg: "physx::PxFlags<physx::PxSoftBodyDataFlag::Enum, unsigned int>", /) -> None: ...

    def setKinematicTargetBufferD(self, arg0: PxVec4, arg1: "physx::PxFlags<physx::PxSoftBodyFlag::Enum, unsigned int>", /) -> None: ...

    def setWakeCounter(self, arg: float, /) -> None: ...

    def getWakeCounter(self) -> float: ...

    def isSleeping(self) -> bool: ...

    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getShape(self) -> PxShape: ...

    def getCollisionMesh(self) -> PxTetrahedronMesh: ...

    def getSimulationMesh(self) -> PxTetrahedronMesh: ...

    def getSoftBodyAuxData(self) -> "physx::PxSoftBodyAuxData": ...

    def attachShape(self, arg: PxShape, /) -> bool: ...

    def attachSimulationMesh(self, arg0: PxTetrahedronMesh, arg1: "physx::PxSoftBodyAuxData", /) -> bool: ...

    def detachShape(self) -> None: ...

    def detachSimulationMesh(self) -> None: ...

    def release(self) -> None: ...

    def addParticleFilter(self, arg0: PxPBDParticleSystem, arg1: "physx::PxParticleBuffer", arg2: int, arg3: int, /) -> None: ...

    def removeParticleFilter(self, arg0: PxPBDParticleSystem, arg1: "physx::PxParticleBuffer", arg2: int, arg3: int, /) -> None: ...

    def addParticleAttachment(self, arg0: PxPBDParticleSystem, arg1: "physx::PxParticleBuffer", arg2: int, arg3: int, arg4: PxVec4, /) -> int: ...

    def removeParticleAttachment(self, arg0: PxPBDParticleSystem, arg1: int, /) -> None: ...

    def addRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def removeRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def addRigidAttachment(self, arg0: PxRigidActor, arg1: int, arg2: PxVec3, arg3: "physx::PxConeLimitedConstraint", /) -> int: ...

    def removeRigidAttachment(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def addTetRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def removeTetRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def addTetRigidAttachment(self, arg0: PxRigidActor, arg1: int, arg2: PxVec4, arg3: PxVec3, arg4: "physx::PxConeLimitedConstraint", /) -> int: ...

    def addSoftBodyFilter(self, arg0: PxSoftBody, arg1: int, arg2: int, /) -> None: ...

    def removeSoftBodyFilter(self, arg0: PxSoftBody, arg1: int, arg2: int, /) -> None: ...

    def addSoftBodyFilters(self, arg0: PxSoftBody, arg1: int, arg2: int, arg3: int, /) -> None: ...

    def removeSoftBodyFilters(self, arg0: PxSoftBody, arg1: int, arg2: int, arg3: int, /) -> None: ...

    def addSoftBodyAttachment(self, arg0: PxSoftBody, arg1: int, arg2: PxVec4, arg3: int, arg4: PxVec4, arg5: "physx::PxConeLimitedConstraint", arg6: float, /) -> int: ...

    def removeSoftBodyAttachment(self, arg0: PxSoftBody, arg1: int, /) -> None: ...

    def getWorldBounds(self, arg: float, /) -> "physx::PxBounds3": ...

    def getGpuSoftBodyIndex(self) -> int: ...

class PxSoftBodyMesh:
    @overload
    def getCollisionMesh(self) -> PxTetrahedronMesh: ...

    @overload
    def getCollisionMesh(self) -> PxTetrahedronMesh: ...

class PxSphereGeometry(PxGeometry):
    def __init__(self, arg: float, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def radius(self) -> float: ...

    @radius.setter
    def radius(self, arg: float, /) -> None: ...

class PxSphericalJoint(PxJoint):
    def getLimitCone(self) -> "physx::PxJointLimitCone": ...

    def setLimitCone(self, arg: "physx::PxJointLimitCone", /) -> None: ...

    def getSwingYAngle(self) -> float: ...

    def getSwingZAngle(self) -> float: ...

    def setSphericalJointFlags(self, arg: "physx::PxFlags<physx::PxSphericalJointFlag::Enum, unsigned short>", /) -> None: ...

    def setSphericalJointFlag(self, arg0: "physx::PxSphericalJointFlag::Enum", arg1: bool, /) -> None: ...

    def getSphericalJointFlags(self) -> "physx::PxFlags<physx::PxSphericalJointFlag::Enum, unsigned short>": ...

class PxTetrahedronMesh:
    def getNbVertices(self) -> int: ...

    def getVertices(self) -> PxVec3: ...

    def getNbTetrahedrons(self) -> int: ...

    def getTetrahedronMeshFlags(self) -> "physx::PxFlags<physx::PxTetrahedronMeshFlag::Enum, unsigned char>": ...

    def getLocalBounds(self) -> "physx::PxBounds3": ...

    def release(self) -> None: ...

class PxTetrahedronMeshGeometry(PxGeometry):
    def __init__(self, arg: PxTetrahedronMesh, /) -> None: ...

    def isValid(self) -> bool: ...

class PxTolerancesScale:
    def __init__(self, defaultLength: float = 1.0, defaultSpeed: float = 10.0) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def length(self) -> float: ...

    @length.setter
    def length(self, arg: float, /) -> None: ...

    @property
    def speed(self) -> float: ...

    @speed.setter
    def speed(self, arg: float, /) -> None: ...

class PxTransform:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, position: PxVec3) -> None: ...

    @overload
    def __init__(self, orientation: PxQuat) -> None: ...

    @overload
    def __init__(self, x: float, y: float, z: float, aQ: PxQuat) -> None: ...

    @overload
    def __init__(self, p0: PxVec3, q0: PxQuat) -> None: ...

    @overload
    def __init__(self, arg: PxMat44, /) -> None: ...

    @property
    def translation(self) -> PxVec3: ...

    @translation.setter
    def translation(self, arg: PxVec3, /) -> None: ...

    @property
    def rotation(self) -> PxQuat: ...

    @rotation.setter
    def rotation(self, arg: PxQuat, /) -> None: ...

    def getInverse(self) -> PxTransform: ...

    def getNormalized(self) -> PxTransform: ...

    @overload
    def transform(self, input: PxVec3) -> PxVec3: ...

    @overload
    def transform(self, input: PxTransform) -> PxTransform: ...

    @overload
    def transformInv(self, input: PxVec3) -> PxVec3: ...

    @overload
    def transformInv(self, input: PxTransform) -> PxTransform: ...

    def rotate(self, input: PxVec3) -> PxVec3: ...

    def rotateInv(self, input: PxVec3) -> PxVec3: ...

    def isValid(self) -> bool: ...

    def isSane(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def __eq__(self, arg: PxTransform, /) -> bool: ...

    def __imul__(self, arg: PxTransform, /) -> PxTransform: ...

    def __mul__(self, arg: PxTransform, /) -> PxTransform: ...

class PxTriangleMesh:
    def getNbVertices(self) -> int: ...

    def getVertices(self) -> PxVec3: ...

    def getVerticesForModification(self) -> PxVec3: ...

    def refitBVH(self) -> "physx::PxBounds3": ...

    def getNbTriangles(self) -> int: ...

    def getTriangleMeshFlags(self) -> "physx::PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>": ...

    def release(self) -> None: ...

    def getTriangleMaterialIndex(self, arg: int, /) -> int: ...

    def getLocalBounds(self) -> "physx::PxBounds3": ...

    def getSDFDimensions(self, arg0: int, arg1: int, arg2: int, /) -> None: ...

    def setPreferSDFProjection(self, arg: bool, /) -> None: ...

    def getPreferSDFProjection(self) -> bool: ...

    def getMassInformation(self, arg0: float, arg1: PxMat33, arg2: PxVec3, /) -> None: ...

class PxTriangleMeshGeometry(PxGeometry):
    def __init__(self, arg0: PxTriangleMesh, arg1: "physx::PxMeshScale", arg2: "physx::PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>", /) -> None: ...

    def isValid(self) -> bool: ...

class PxVec3:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, v: PxVec3) -> float: ...

    def cross(self, v: PxVec3) -> PxVec3: ...

    def getNormalized(self) -> PxVec3: ...

    def normalize(self) -> float: ...

    def normalizeSafe(self) -> float: ...

    def normalizeFast(self) -> float: ...

    def multiply(self, a: PxVec3) -> PxVec3: ...

    def minimum(self, v: PxVec3) -> PxVec3: ...

    def minElement(self) -> float: ...

    def maximum(self, v: PxVec3) -> PxVec3: ...

    def maxElement(self) -> float: ...

    def abs(self) -> PxVec3: ...

    def __iadd__(self, arg: PxVec3, /) -> PxVec3: ...

    def __add__(self, arg: PxVec3, /) -> PxVec3: ...

    def __isub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __sub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __imul__(self, arg: float, /) -> PxVec3: ...

    def __mul__(self, arg: float, /) -> PxVec3: ...

    def __itruediv__(self, arg: float, /) -> PxVec3: ...

    def __truediv__(self, arg: float, /) -> PxVec3: ...

    def __neg__(self) -> PxVec3: ...

    def __ne__(self, arg: PxVec3, /) -> bool: ...

    def __eq__(self, arg: PxVec3, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...

class PxVec4:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float, nw: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, v: PxVec4) -> float: ...

    def getNormalized(self) -> PxVec4: ...

    def normalize(self) -> float: ...

    def multiply(self, a: PxVec4) -> PxVec4: ...

    def minimum(self, v: PxVec4) -> PxVec4: ...

    def maximum(self, v: PxVec4) -> PxVec4: ...

    def __iadd__(self, arg: PxVec4, /) -> PxVec4: ...

    def __add__(self, arg: PxVec4, /) -> PxVec4: ...

    def __isub__(self, arg: PxVec4, /) -> PxVec4: ...

    def __sub__(self, arg: PxVec4, /) -> PxVec4: ...

    def __imul__(self, arg: float, /) -> PxVec4: ...

    def __mul__(self, arg: float, /) -> PxVec4: ...

    def __itruediv__(self, arg: float, /) -> PxVec4: ...

    def __truediv__(self, arg: float, /) -> PxVec4: ...

    def __neg__(self) -> PxVec4: ...

    def __ne__(self, arg: PxVec4, /) -> bool: ...

    def __eq__(self, arg: PxVec4, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...

class PxZERO(enum.Enum):
    PxZero = 0
