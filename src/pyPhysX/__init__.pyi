import enum
from typing import overload


class PxEMPTY(enum.Enum):
    PxEmpty = 0

class PxIDENTITY(enum.Enum):
    PxIdentity = 0

class PxMat33:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, col0: PxVec3, col1: PxVec3, col2: PxVec3) -> None: ...

    @overload
    def __init__(self, v: float) -> None: ...

    @overload
    def __init__(self) -> PxMat33: ...

    @overload
    def __init__(self, q: PxQuat) -> None: ...

    @staticmethod
    def createDiagonal(d: PxVec3) -> PxMat33: ...

    @staticmethod
    def outer(a: PxVec3, b: PxVec3) -> PxMat33: ...

    def getTranspose(self) -> PxMat33: ...

    def getInverse(self) -> PxMat33: ...

    def getDeterminant(self) -> float: ...

    def transform(self, other: PxVec3) -> PxVec3: ...

    def transformTranspose(self, other: PxVec3) -> PxVec3: ...

    def __iadd__(self, arg: PxMat33, /) -> PxMat33: ...

    def __add__(self, arg: PxMat33, /) -> PxMat33: ...

    def __isub__(self, arg: PxMat33, /) -> PxMat33: ...

    def __sub__(self, arg: PxMat33, /) -> PxMat33: ...

    @overload
    def __imul__(self, arg: PxMat33, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxMat33, /) -> PxMat33: ...

    @overload
    def __mul__(self, arg: float, /) -> PxMat33: ...

    def __neg__(self) -> PxMat33: ...

    def __getitem__(self, arg: tuple[int, int], /) -> float: ...

    def __setitem__(self, arg0: tuple[int, int], arg1: float, /) -> None: ...

class PxMat44:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, col0: PxVec4, col1: PxVec4, col2: PxVec4, col3: PxVec4) -> None: ...

    @overload
    def __init__(self, v: float) -> None: ...

    @overload
    def __init__(self) -> PxMat44: ...

    @overload
    def __init__(self, q: PxQuat) -> None: ...

    @overload
    def __init__(self, diagonal: PxVec4) -> None: ...

    @overload
    def __init__(self, axes: PxMat33, position: PxVec3) -> None: ...

    def getTranspose(self) -> PxMat44: ...

    @overload
    def transform(self, other: PxVec4) -> PxVec4: ...

    @overload
    def transform(self, other: PxVec3) -> PxVec3: ...

    @overload
    def rotate(self, other: PxVec4) -> PxVec4: ...

    @overload
    def rotate(self, other: PxVec3) -> PxVec3: ...

    def getBasis(self, num: int) -> PxVec3: ...

    def getPosition(self) -> PxVec3: ...

    def setPosition(self, position: PxVec3) -> None: ...

    def scale(self, p: PxVec4) -> None: ...

    def inverseRT(self) -> PxMat44: ...

    def isFinite(self) -> bool: ...

    def __iadd__(self, arg: PxMat44, /) -> PxMat44: ...

    def __add__(self, arg: PxMat44, /) -> PxMat44: ...

    def __isub__(self, arg: PxMat44, /) -> PxMat44: ...

    def __sub__(self, arg: PxMat44, /) -> PxMat44: ...

    @overload
    def __imul__(self, arg: PxMat44, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxMat44, /) -> PxMat44: ...

    @overload
    def __mul__(self, arg: float, /) -> PxMat44: ...

    def __neg__(self) -> PxMat44: ...

    def __getitem__(self, arg: tuple[int, int], /) -> float: ...

    def __setitem__(self, arg0: tuple[int, int], arg1: float, /) -> None: ...

class PxMaterial:
    def setDynamicFriction(self, coef: float) -> None: ...

    def getDynamicFriction(self) -> float: ...

class PxQuat:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float, nw: float) -> None: ...

    @overload
    def __init__(self, angleRadians: float, unitAxis: PxVec3) -> None: ...

    @overload
    def __init__(self, m: PxMat33) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    def isIdentity(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isUnit(self) -> bool: ...

    def isSane(self) -> bool: ...

    def toRadiansAndUnitAxis(self, angle: float, axis: PxVec3) -> None: ...

    @overload
    def getAngle(self) -> float: ...

    @overload
    def getAngle(self, arg: PxQuat, /) -> float: ...

    def magnitudeSquared(self) -> float: ...

    def dot(self, v: PxQuat) -> float: ...

    def getNormalized(self) -> PxQuat: ...

    def magnitude(self) -> float: ...

    def normalize(self) -> float: ...

    def getConjugate(self) -> PxQuat: ...

    def getImaginaryPart(self) -> PxVec3: ...

    def getBasisVector0(self) -> PxVec3: ...

    def getBasisVector1(self) -> PxVec3: ...

    def getBasisVector2(self) -> PxVec3: ...

    def rotate(self, v: PxVec3) -> PxVec3: ...

    def rotateInv(self, v: PxVec3) -> PxVec3: ...

    def __iadd__(self, arg: PxQuat, /) -> PxQuat: ...

    def __add__(self, arg: PxQuat, /) -> PxQuat: ...

    def __isub__(self, arg: PxQuat, /) -> PxQuat: ...

    def __sub__(self, arg: PxQuat, /) -> PxQuat: ...

    @overload
    def __imul__(self, arg: PxQuat, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxQuat, /) -> PxQuat: ...

    @overload
    def __mul__(self, arg: float, /) -> PxQuat: ...

    def __neg__(self) -> PxQuat: ...

    def __eq__(self, arg: PxQuat, /) -> bool: ...

class PxTransform:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, position: PxVec3) -> None: ...

    @overload
    def __init__(self, orientation: PxQuat) -> None: ...

    @overload
    def __init__(self, x: float, y: float, z: float, aQ: PxQuat) -> None: ...

    @overload
    def __init__(self, p0: PxVec3, q0: PxQuat) -> None: ...

    @overload
    def __init__(self, arg: PxMat44, /) -> None: ...

    @property
    def translation(self) -> PxVec3: ...

    @translation.setter
    def translation(self, arg: PxVec3, /) -> None: ...

    @property
    def rotation(self) -> PxQuat: ...

    @rotation.setter
    def rotation(self, arg: PxQuat, /) -> None: ...

    def getInverse(self) -> PxTransform: ...

    def getNormalized(self) -> PxTransform: ...

    @overload
    def transform(self, input: PxVec3) -> PxVec3: ...

    @overload
    def transform(self, input: PxTransform) -> PxTransform: ...

    @overload
    def transformInv(self, input: PxVec3) -> PxVec3: ...

    @overload
    def transformInv(self, input: PxTransform) -> PxTransform: ...

    def rotate(self, input: PxVec3) -> PxVec3: ...

    def rotateInv(self, input: PxVec3) -> PxVec3: ...

    def isValid(self) -> bool: ...

    def isSane(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def __eq__(self, arg: PxTransform, /) -> bool: ...

    def __imul__(self, arg: PxTransform, /) -> PxTransform: ...

    def __mul__(self, arg: PxTransform, /) -> PxTransform: ...

class PxVec3:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, v: PxVec3) -> float: ...

    def cross(self, v: PxVec3) -> PxVec3: ...

    def getNormalized(self) -> PxVec3: ...

    def normalize(self) -> float: ...

    def normalizeSafe(self) -> float: ...

    def normalizeFast(self) -> float: ...

    def multiply(self, a: PxVec3) -> PxVec3: ...

    def minimum(self, v: PxVec3) -> PxVec3: ...

    def minElement(self) -> float: ...

    def maximum(self, v: PxVec3) -> PxVec3: ...

    def maxElement(self) -> float: ...

    def abs(self) -> PxVec3: ...

    def __iadd__(self, arg: PxVec3, /) -> PxVec3: ...

    def __add__(self, arg: PxVec3, /) -> PxVec3: ...

    def __isub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __sub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __imul__(self, arg: float, /) -> PxVec3: ...

    def __mul__(self, arg: float, /) -> PxVec3: ...

    def __itruediv__(self, arg: float, /) -> PxVec3: ...

    def __truediv__(self, arg: float, /) -> PxVec3: ...

    def __neg__(self) -> PxVec3: ...

    def __ne__(self, arg: PxVec3, /) -> bool: ...

    def __eq__(self, arg: PxVec3, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...

class PxVec4:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float, nw: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, v: PxVec4) -> float: ...

    def getNormalized(self) -> PxVec4: ...

    def normalize(self) -> float: ...

    def multiply(self, a: PxVec4) -> PxVec4: ...

    def minimum(self, v: PxVec4) -> PxVec4: ...

    def maximum(self, v: PxVec4) -> PxVec4: ...

    def __iadd__(self, arg: PxVec4, /) -> PxVec4: ...

    def __add__(self, arg: PxVec4, /) -> PxVec4: ...

    def __isub__(self, arg: PxVec4, /) -> PxVec4: ...

    def __sub__(self, arg: PxVec4, /) -> PxVec4: ...

    def __imul__(self, arg: float, /) -> PxVec4: ...

    def __mul__(self, arg: float, /) -> PxVec4: ...

    def __itruediv__(self, arg: float, /) -> PxVec4: ...

    def __truediv__(self, arg: float, /) -> PxVec4: ...

    def __neg__(self) -> PxVec4: ...

    def __ne__(self, arg: PxVec4, /) -> bool: ...

    def __eq__(self, arg: PxVec4, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...

class PxZERO(enum.Enum):
    PxZero = 0
