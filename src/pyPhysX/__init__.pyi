import enum
from typing import overload


class PxExtendedVec3:
    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

class PxIDENTITY(enum.Enum):
    PxIdentity = 0

class PxMaterial:
    def setDynamicFriction(self, coef: float) -> None: ...

    def getDynamicFriction(self) -> float: ...

class PxQuat:
    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

class PxTransform:
    @property
    def translation(self) -> PxVec3: ...

    @translation.setter
    def translation(self, arg: PxVec3, /) -> None: ...

    @property
    def rotation(self) -> PxQuat: ...

    @rotation.setter
    def rotation(self, arg: PxQuat, /) -> None: ...

class PxVec3:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, /) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, arg: PxVec3, /) -> float: ...

    def cross(self, arg: PxVec3, /) -> PxVec3: ...

    def getNormalized(self) -> PxVec3: ...

    def normalize(self) -> float: ...

    def normalizeSafe(self) -> float: ...

    def normalizeFast(self) -> float: ...

    def multiply(self, arg: PxVec3, /) -> PxVec3: ...

    def minimum(self, arg: PxVec3, /) -> PxVec3: ...

    def minElement(self) -> float: ...

    def maximum(self, arg: PxVec3, /) -> PxVec3: ...

    def maxElement(self) -> float: ...

    @overload
    def abs(self) -> PxVec3: ...

    @overload
    def abs(self) -> PxVec3: ...

    def __iadd__(self, arg: PxVec3, /) -> PxVec3: ...

    def __add__(self, arg: PxVec3, /) -> PxVec3: ...

    def __isub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __sub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __imul__(self, arg: float, /) -> PxVec3: ...

    def __mul__(self, arg: float, /) -> PxVec3: ...

    def __itruediv__(self, arg: float, /) -> PxVec3: ...

    def __truediv__(self, arg: float, /) -> PxVec3: ...

    def __neg__(self) -> PxVec3: ...

    def __ne__(self, arg: PxVec3, /) -> bool: ...

    def __eq__(self, arg: PxVec3, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...
