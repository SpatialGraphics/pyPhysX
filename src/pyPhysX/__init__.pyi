from collections.abc import Callable, Sequence
import enum
from typing import Annotated, overload

from numpy.typing import ArrayLike


class BroadPhaseCallback(PxBroadPhaseCallback):
    pass

class CCDContactModifyCallback(PxCCDContactModifyCallback):
    pass

class ContactModifyCallback(PxContactModifyCallback):
    pass

class ControllerBehaviorCallback(PxControllerBehaviorCallback):
    def __init__(self, arg0: Callable[[PxController], int], arg1: Callable[[PxObstacle], int], arg2: Callable[[PxShape, PxActor], int], /) -> None: ...

class ControllerFilterCallback(PxControllerFilterCallback):
    def __init__(self, arg: Callable[[PxController, PxController], bool], /) -> None: ...

class PxActor:
    def release(self) -> None: ...

    def getType(self) -> PxActorType: ...

    def getScene(self) -> PxScene: ...

    def setName(self, name: str) -> None: ...

    def getName(self) -> str: ...

    def getWorldBounds(self, inflation: float = 1.0099999904632568) -> PxBounds3: ...

    def setActorFlag(self, flag: PxActorFlag, value: bool) -> None: ...

    def setActorFlags(self, flags: PxActorFlags) -> None: ...

    def getActorFlags(self) -> PxActorFlags: ...

    def setDominanceGroup(self, dominanceGroup: int) -> None: ...

    def getDominanceGroup(self) -> int: ...

class PxActorFlag(enum.Enum):
    eVISUALIZATION = 1

    eDISABLE_GRAVITY = 2

    eSEND_SLEEP_NOTIFIES = 4

    eDISABLE_SIMULATION = 8

class PxActorFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxActorFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxActorFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxActorFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxActorFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxActorFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxActorFlags, /) -> PxActorFlags: ...

    @overload
    def __or__(self, arg: PxActorFlag, /) -> PxActorFlags: ...

    @overload
    def __ior__(self, arg: PxActorFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxActorFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxActorFlags, /) -> PxActorFlags: ...

    @overload
    def __and__(self, arg: PxActorFlag, /) -> PxActorFlags: ...

    @overload
    def __iand__(self, arg: PxActorFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxActorFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxActorFlags, /) -> PxActorFlags: ...

    @overload
    def __xor__(self, arg: PxActorFlag, /) -> PxActorFlags: ...

    @overload
    def __ixor__(self, arg: PxActorFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxActorFlag, /) -> None: ...

    def __invert__(self) -> PxActorFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxActorFlag, /) -> None: ...

    def isSet(self, arg: PxActorFlag, /) -> bool: ...

    def setAll(self, arg: PxActorFlag, /) -> PxActorFlags: ...

class PxActorType(enum.Enum):
    eRIGID_STATIC = 0

    eRIGID_DYNAMIC = 1

    eARTICULATION_LINK = 2

    eSOFTBODY = 3

    eFEMCLOTH = 4

    ePBD_PARTICLESYSTEM = 5

    eHAIRSYSTEM = 6

class PxAggregate:
    def release(self) -> None: ...

    def addActor(self, actor: PxActor) -> bool: ...

    def removeActor(self, actor: PxActor) -> bool: ...

    def addArticulation(self, articulation: PxArticulationReducedCoordinate) -> bool: ...

    def removeArticulation(self, articulation: PxArticulationReducedCoordinate) -> bool: ...

    def getNbActors(self) -> int: ...

    def getMaxNbActors(self) -> int: ...

    def getMaxNbShapes(self) -> int: ...

    def getScene(self) -> PxScene: ...

    def getSelfCollision(self) -> bool: ...

class PxArticulationAttachment:
    def setRestLength(self, arg: float, /) -> None: ...

    def getRestLength(self) -> float: ...

    def setLimitParameters(self, arg: PxArticulationTendonLimit, /) -> None: ...

    def getLimitParameters(self) -> PxArticulationTendonLimit: ...

    def setRelativeOffset(self, arg: PxVec3, /) -> None: ...

    def getRelativeOffset(self) -> PxVec3: ...

    def setCoefficient(self, arg: float, /) -> None: ...

    def getCoefficient(self) -> float: ...

    def getLink(self) -> PxArticulationLink: ...

    def getParent(self) -> PxArticulationAttachment: ...

    def isLeaf(self) -> bool: ...

    def getTendon(self) -> PxArticulationSpatialTendon: ...

    def release(self) -> None: ...

class PxArticulationAxis(enum.Enum):
    eTWIST = 0

    eSWING1 = 1

    eSWING2 = 2

    eX = 3

    eY = 4

    eZ = 5

class PxArticulationCache:
    def release(self) -> None: ...

    def externalForces(self, arg: PxArticulationReducedCoordinate, /) -> list[PxSpatialForce]: ...

    def denseJacobian(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None, None), order='F')]: ...

    def massMatrix(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None, None), order='F')]: ...

    def jointVelocity(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')]: ...

    def jointAcceleration(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')]: ...

    def jointPosition(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')]: ...

    def jointForce(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')]: ...

    def jointTargetPositions(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')]: ...

    def jointTargetVelocities(self, arg: PxArticulationReducedCoordinate, /) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')]: ...

    def linkVelocity(self, arg: PxArticulationReducedCoordinate, /) -> list[PxSpatialVelocity]: ...

    def linkAcceleration(self, arg: PxArticulationReducedCoordinate, /) -> list[PxSpatialVelocity]: ...

    def linkIncomingJointForce(self, arg: PxArticulationReducedCoordinate, /) -> list[PxSpatialForce]: ...

    def linkForce(self, arg: PxArticulationReducedCoordinate, /) -> list[PxVec3]: ...

    def linkTorque(self, arg: PxArticulationReducedCoordinate, /) -> list[PxVec3]: ...

    def rootLinkData(self, arg: PxArticulationReducedCoordinate, /) -> list[PxArticulationRootLinkData]: ...

class PxArticulationCacheFlag(enum.Enum):
    eVELOCITY = 1

    eACCELERATION = 2

    ePOSITION = 4

    eFORCE = 8

    eLINK_VELOCITY = 16

    eLINK_ACCELERATION = 32

    eROOT_TRANSFORM = 64

    eROOT_VELOCITIES = 128

    eLINK_INCOMING_JOINT_FORCE = 1024

    eJOINT_TARGET_POSITIONS = 2048

    eJOINT_TARGET_VELOCITIES = 4096

    eLINK_FORCE = 8192

    eLINK_TORQUE = 16384

    eALL = 247

class PxArticulationCacheFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxArticulationCacheFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxArticulationCacheFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxArticulationCacheFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxArticulationCacheFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxArticulationCacheFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxArticulationCacheFlags, /) -> PxArticulationCacheFlags: ...

    @overload
    def __or__(self, arg: PxArticulationCacheFlag, /) -> PxArticulationCacheFlags: ...

    @overload
    def __ior__(self, arg: PxArticulationCacheFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxArticulationCacheFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxArticulationCacheFlags, /) -> PxArticulationCacheFlags: ...

    @overload
    def __and__(self, arg: PxArticulationCacheFlag, /) -> PxArticulationCacheFlags: ...

    @overload
    def __iand__(self, arg: PxArticulationCacheFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxArticulationCacheFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxArticulationCacheFlags, /) -> PxArticulationCacheFlags: ...

    @overload
    def __xor__(self, arg: PxArticulationCacheFlag, /) -> PxArticulationCacheFlags: ...

    @overload
    def __ixor__(self, arg: PxArticulationCacheFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxArticulationCacheFlag, /) -> None: ...

    def __invert__(self) -> PxArticulationCacheFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxArticulationCacheFlag, /) -> None: ...

    def isSet(self, arg: PxArticulationCacheFlag, /) -> bool: ...

    def setAll(self, arg: PxArticulationCacheFlag, /) -> PxArticulationCacheFlags: ...

class PxArticulationDrive:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: PxArticulationDriveType, /) -> None: ...

    @property
    def stiffness(self) -> float: ...

    @stiffness.setter
    def stiffness(self, arg: float, /) -> None: ...

    @property
    def damping(self) -> float: ...

    @damping.setter
    def damping(self, arg: float, /) -> None: ...

    @property
    def maxForce(self) -> float: ...

    @maxForce.setter
    def maxForce(self, arg: float, /) -> None: ...

    @property
    def driveType(self) -> PxArticulationDriveType: ...

    @driveType.setter
    def driveType(self, arg: PxArticulationDriveType, /) -> None: ...

class PxArticulationDriveType(enum.Enum):
    eFORCE = 0

    eACCELERATION = 1

class PxArticulationFixedTendon(PxArticulationTendon):
    def createTendonJoint(self, arg0: PxArticulationTendonJoint, arg1: PxArticulationAxis, arg2: float, arg3: float, arg4: PxArticulationLink, /) -> PxArticulationTendonJoint: ...

    def getNbTendonJoints(self) -> int: ...

    def setRestLength(self, arg: float, /) -> None: ...

    def getRestLength(self) -> float: ...

    def setLimitParameters(self, arg: PxArticulationTendonLimit, /) -> None: ...

    def getLimitParameters(self) -> PxArticulationTendonLimit: ...

class PxArticulationFlag(enum.Enum):
    eFIX_BASE = 1

    eDRIVE_LIMITS_ARE_FORCES = 2

    eDISABLE_SELF_COLLISION = 4

class PxArticulationFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxArticulationFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxArticulationFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxArticulationFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxArticulationFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxArticulationFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxArticulationFlags, /) -> PxArticulationFlags: ...

    @overload
    def __or__(self, arg: PxArticulationFlag, /) -> PxArticulationFlags: ...

    @overload
    def __ior__(self, arg: PxArticulationFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxArticulationFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxArticulationFlags, /) -> PxArticulationFlags: ...

    @overload
    def __and__(self, arg: PxArticulationFlag, /) -> PxArticulationFlags: ...

    @overload
    def __iand__(self, arg: PxArticulationFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxArticulationFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxArticulationFlags, /) -> PxArticulationFlags: ...

    @overload
    def __xor__(self, arg: PxArticulationFlag, /) -> PxArticulationFlags: ...

    @overload
    def __ixor__(self, arg: PxArticulationFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxArticulationFlag, /) -> None: ...

    def __invert__(self) -> PxArticulationFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxArticulationFlag, /) -> None: ...

    def isSet(self, arg: PxArticulationFlag, /) -> bool: ...

    def setAll(self, arg: PxArticulationFlag, /) -> PxArticulationFlags: ...

class PxArticulationJointReducedCoordinate:
    def getParentArticulationLink(self) -> PxArticulationLink: ...

    def setParentPose(self, arg: PxTransform, /) -> None: ...

    def getParentPose(self) -> PxTransform: ...

    def getChildArticulationLink(self) -> PxArticulationLink: ...

    def setChildPose(self, arg: PxTransform, /) -> None: ...

    def getChildPose(self) -> PxTransform: ...

    def setJointType(self, arg: PxArticulationJointType, /) -> None: ...

    def getJointType(self) -> PxArticulationJointType: ...

    def setMotion(self, arg0: PxArticulationAxis, arg1: PxArticulationMotion, /) -> None: ...

    def getMotion(self, arg: PxArticulationAxis, /) -> PxArticulationMotion: ...

    def setLimitParams(self, arg0: PxArticulationAxis, arg1: PxArticulationLimit, /) -> None: ...

    def getLimitParams(self, arg: PxArticulationAxis, /) -> PxArticulationLimit: ...

    def setDriveParams(self, arg0: PxArticulationAxis, arg1: PxArticulationDrive, /) -> None: ...

    def getDriveParams(self, arg: PxArticulationAxis, /) -> PxArticulationDrive: ...

    def setDriveTarget(self, arg0: PxArticulationAxis, arg1: float, arg2: bool, /) -> None: ...

    def getDriveTarget(self, arg: PxArticulationAxis, /) -> float: ...

    def setDriveVelocity(self, arg0: PxArticulationAxis, arg1: float, arg2: bool, /) -> None: ...

    def getDriveVelocity(self, arg: PxArticulationAxis, /) -> float: ...

    def setArmature(self, arg0: PxArticulationAxis, arg1: float, /) -> None: ...

    def getArmature(self, arg: PxArticulationAxis, /) -> float: ...

    def setFrictionCoefficient(self, arg: float, /) -> None: ...

    def getFrictionCoefficient(self) -> float: ...

    def setMaxJointVelocity(self, arg: float, /) -> None: ...

    def getMaxJointVelocity(self) -> float: ...

    def setJointPosition(self, arg0: PxArticulationAxis, arg1: float, /) -> None: ...

    def getJointPosition(self, arg: PxArticulationAxis, /) -> float: ...

    def setJointVelocity(self, arg0: PxArticulationAxis, arg1: float, /) -> None: ...

    def getJointVelocity(self, arg: PxArticulationAxis, /) -> float: ...

class PxArticulationJointType(enum.Enum):
    eFIX = 0

    ePRISMATIC = 1

    eREVOLUTE = 2

    eREVOLUTE_UNWRAPPED = 3

    eSPHERICAL = 4

class PxArticulationKinematicFlag(enum.Enum):
    ePOSITION = 1

    eVELOCITY = 2

class PxArticulationKinematicFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxArticulationKinematicFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxArticulationKinematicFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxArticulationKinematicFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxArticulationKinematicFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxArticulationKinematicFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxArticulationKinematicFlags, /) -> PxArticulationKinematicFlags: ...

    @overload
    def __or__(self, arg: PxArticulationKinematicFlag, /) -> PxArticulationKinematicFlags: ...

    @overload
    def __ior__(self, arg: PxArticulationKinematicFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxArticulationKinematicFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxArticulationKinematicFlags, /) -> PxArticulationKinematicFlags: ...

    @overload
    def __and__(self, arg: PxArticulationKinematicFlag, /) -> PxArticulationKinematicFlags: ...

    @overload
    def __iand__(self, arg: PxArticulationKinematicFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxArticulationKinematicFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxArticulationKinematicFlags, /) -> PxArticulationKinematicFlags: ...

    @overload
    def __xor__(self, arg: PxArticulationKinematicFlag, /) -> PxArticulationKinematicFlags: ...

    @overload
    def __ixor__(self, arg: PxArticulationKinematicFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxArticulationKinematicFlag, /) -> None: ...

    def __invert__(self) -> PxArticulationKinematicFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxArticulationKinematicFlag, /) -> None: ...

    def isSet(self, arg: PxArticulationKinematicFlag, /) -> bool: ...

    def setAll(self, arg: PxArticulationKinematicFlag, /) -> PxArticulationKinematicFlags: ...

class PxArticulationLimit:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, /) -> None: ...

    @property
    def low(self) -> float: ...

    @low.setter
    def low(self, arg: float, /) -> None: ...

    @property
    def high(self) -> float: ...

    @high.setter
    def high(self, arg: float, /) -> None: ...

class PxArticulationLink(PxRigidBody):
    def release(self) -> None: ...

    def getArticulation(self) -> PxArticulationReducedCoordinate: ...

    def getInboundJoint(self) -> PxArticulationJointReducedCoordinate: ...

    def getInboundJointDof(self) -> int: ...

    def getNbChildren(self) -> int: ...

    def getLinkIndex(self) -> int: ...

    def setCfmScale(self, arg: float, /) -> None: ...

    def getCfmScale(self) -> float: ...

    def getLinearVelocity(self) -> PxVec3: ...

    def getAngularVelocity(self) -> PxVec3: ...

class PxArticulationMimicJoint:
    def release(self) -> None: ...

    def getArticulation(self) -> PxArticulationReducedCoordinate: ...

    def getGearRatio(self) -> float: ...

    def setGearRatio(self, arg: float, /) -> None: ...

    def getOffset(self) -> float: ...

    def setOffset(self, arg: float, /) -> None: ...

    def getJointA(self) -> PxArticulationJointReducedCoordinate: ...

    def getJointB(self) -> PxArticulationJointReducedCoordinate: ...

    def getAxisA(self) -> PxArticulationAxis: ...

    def getAxisB(self) -> PxArticulationAxis: ...

class PxArticulationMotion(enum.Enum):
    eLOCKED = 0

    eLIMITED = 1

    eFREE = 2

class PxArticulationReducedCoordinate:
    def getScene(self) -> PxScene: ...

    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def isSleeping(self) -> bool: ...

    def setSleepThreshold(self, arg: float, /) -> None: ...

    def getSleepThreshold(self) -> float: ...

    def setStabilizationThreshold(self, arg: float, /) -> None: ...

    def getStabilizationThreshold(self) -> float: ...

    def setWakeCounter(self, arg: float, /) -> None: ...

    def getWakeCounter(self) -> float: ...

    def wakeUp(self) -> None: ...

    def putToSleep(self) -> None: ...

    def setMaxCOMLinearVelocity(self, arg: float, /) -> None: ...

    def getMaxCOMLinearVelocity(self) -> float: ...

    def setMaxCOMAngularVelocity(self, arg: float, /) -> None: ...

    def getMaxCOMAngularVelocity(self) -> float: ...

    def createLink(self, arg0: PxArticulationLink, arg1: PxTransform, /) -> PxArticulationLink: ...

    def release(self) -> None: ...

    def getNbLinks(self) -> int: ...

    def getNbShapes(self) -> int: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

    def getWorldBounds(self, arg: float, /) -> PxBounds3: ...

    def getAggregate(self) -> PxAggregate: ...

    def setArticulationFlags(self, arg: PxArticulationFlags, /) -> None: ...

    def setArticulationFlag(self, arg0: PxArticulationFlag, arg1: bool, /) -> None: ...

    def getArticulationFlags(self) -> PxArticulationFlags: ...

    def getDofs(self) -> int: ...

    def createCache(self) -> PxArticulationCache: ...

    def getCacheDataSize(self) -> int: ...

    def zeroCache(self, arg: PxArticulationCache, /) -> None: ...

    def applyCache(self, arg0: PxArticulationCache, arg1: PxArticulationCacheFlags, arg2: bool, /) -> None: ...

    def copyInternalStateToCache(self, arg0: PxArticulationCache, arg1: PxArticulationCacheFlags, /) -> None: ...

    def packJointData(self, arg0: float, arg1: float, /) -> None: ...

    def unpackJointData(self, arg0: float, arg1: float, /) -> None: ...

    def commonInit(self) -> None: ...

    def computeGeneralizedGravityForce(self, arg: PxArticulationCache, /) -> None: ...

    def computeCoriolisAndCentrifugalForce(self, arg: PxArticulationCache, /) -> None: ...

    def computeGeneralizedExternalForce(self, arg: PxArticulationCache, /) -> None: ...

    def computeJointAcceleration(self, arg: PxArticulationCache, /) -> None: ...

    def computeJointForce(self, arg: PxArticulationCache, /) -> None: ...

    def computeDenseJacobian(self, arg0: PxArticulationCache, arg1: int, arg2: int, /) -> None: ...

    def computeCoefficientMatrix(self, arg: PxArticulationCache, /) -> None: ...

    def computeLambda(self, arg0: PxArticulationCache, arg1: PxArticulationCache, arg2: float, arg3: int, /) -> bool: ...

    def computeGeneralizedMassMatrix(self, arg: PxArticulationCache, /) -> None: ...

    def addLoopJoint(self, arg: PxConstraint, /) -> None: ...

    def removeLoopJoint(self, arg: PxConstraint, /) -> None: ...

    def getNbLoopJoints(self) -> int: ...

    def getCoefficientMatrixSize(self) -> int: ...

    def setRootGlobalPose(self, arg0: PxTransform, arg1: bool, /) -> None: ...

    def getRootGlobalPose(self) -> PxTransform: ...

    def setRootLinearVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def getRootLinearVelocity(self) -> PxVec3: ...

    def setRootAngularVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def getRootAngularVelocity(self) -> PxVec3: ...

    def getLinkAcceleration(self, arg: int, /) -> PxSpatialVelocity: ...

    def getGpuArticulationIndex(self) -> int: ...

    def getGPUIndex(self) -> int: ...

    def createSpatialTendon(self) -> PxArticulationSpatialTendon: ...

    def createFixedTendon(self) -> PxArticulationFixedTendon: ...

    def getNbSpatialTendons(self) -> int: ...

    def getNbFixedTendons(self) -> int: ...

    def createMimicJoint(self, arg0: PxArticulationJointReducedCoordinate, arg1: PxArticulationAxis, arg2: PxArticulationJointReducedCoordinate, arg3: PxArticulationAxis, arg4: float, arg5: float, /) -> PxArticulationMimicJoint: ...

    def getNbMimicJoints(self) -> int: ...

    def updateKinematic(self, arg: PxArticulationKinematicFlags, /) -> None: ...

    def getSolverResidual(self) -> PxResiduals: ...

class PxArticulationRootLinkData:
    @property
    def transform(self) -> PxTransform: ...

    @transform.setter
    def transform(self, arg: PxTransform, /) -> None: ...

    @property
    def worldLinVel(self) -> PxVec3: ...

    @worldLinVel.setter
    def worldLinVel(self, arg: PxVec3, /) -> None: ...

    @property
    def worldAngVel(self) -> PxVec3: ...

    @worldAngVel.setter
    def worldAngVel(self, arg: PxVec3, /) -> None: ...

    @property
    def worldLinAccel(self) -> PxVec3: ...

    @worldLinAccel.setter
    def worldLinAccel(self, arg: PxVec3, /) -> None: ...

    @property
    def worldAngAccel(self) -> PxVec3: ...

    @worldAngAccel.setter
    def worldAngAccel(self, arg: PxVec3, /) -> None: ...

class PxArticulationSpatialTendon(PxArticulationTendon):
    def createAttachment(self, arg0: PxArticulationAttachment, arg1: float, arg2: PxVec3, arg3: PxArticulationLink, /) -> PxArticulationAttachment: ...

    def getNbAttachments(self) -> int: ...

class PxArticulationTendon:
    def setStiffness(self, arg: float, /) -> None: ...

    def getStiffness(self) -> float: ...

    def setDamping(self, arg: float, /) -> None: ...

    def getDamping(self) -> float: ...

    def setLimitStiffness(self, arg: float, /) -> None: ...

    def getLimitStiffness(self) -> float: ...

    def setOffset(self, arg0: float, arg1: bool, /) -> None: ...

    def getOffset(self) -> float: ...

    def getArticulation(self) -> PxArticulationReducedCoordinate: ...

    def release(self) -> None: ...

class PxArticulationTendonJoint:
    def setCoefficient(self, arg0: PxArticulationAxis, arg1: float, arg2: float, /) -> None: ...

    def getCoefficient(self, arg0: PxArticulationAxis, arg1: float, arg2: float, /) -> None: ...

    def getLink(self) -> PxArticulationLink: ...

    def getParent(self) -> PxArticulationTendonJoint: ...

    def getTendon(self) -> PxArticulationFixedTendon: ...

    def release(self) -> None: ...

class PxArticulationTendonLimit:
    @property
    def lowLimit(self) -> float: ...

    @lowLimit.setter
    def lowLimit(self, arg: float, /) -> None: ...

    @property
    def highLimit(self) -> float: ...

    @highLimit.setter
    def highLimit(self, arg: float, /) -> None: ...

class PxBaseMaterial:
    def isKindOf(self, arg: str, /) -> bool: ...

class PxBounds3:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, minimum: PxVec3, maximum: PxVec3) -> None: ...

    @staticmethod
    def empty() -> PxBounds3: ...

    @staticmethod
    def boundsOfPoints(arg0: PxVec3, arg1: PxVec3, /) -> PxBounds3: ...

    @staticmethod
    def centerExtents(arg0: PxVec3, arg1: PxVec3, /) -> PxBounds3: ...

    @staticmethod
    def basisExtent(arg0: PxVec3, arg1: PxMat33, arg2: PxVec3, /) -> PxBounds3: ...

    @staticmethod
    def poseExtent(arg0: PxTransform, arg1: PxVec3, /) -> PxBounds3: ...

    @overload
    @staticmethod
    def transformSafe(arg0: PxMat33, arg1: PxBounds3, /) -> PxBounds3: ...

    @overload
    @staticmethod
    def transformSafe(arg0: PxTransform, arg1: PxBounds3, /) -> PxBounds3: ...

    @overload
    @staticmethod
    def transformFast(arg0: PxMat33, arg1: PxBounds3, /) -> PxBounds3: ...

    @overload
    @staticmethod
    def transformFast(arg0: PxTransform, arg1: PxBounds3, /) -> PxBounds3: ...

    def setEmpty(self) -> None: ...

    def setMaximal(self) -> None: ...

    @overload
    def include(self, arg: PxVec3, /) -> None: ...

    @overload
    def include(self, arg: PxBounds3, /) -> None: ...

    def isEmpty(self) -> bool: ...

    def intersects(self, arg: PxBounds3, /) -> bool: ...

    def intersects1D(self, arg0: PxBounds3, arg1: int, /) -> bool: ...

    def contains(self, arg: PxVec3, /) -> bool: ...

    def isInside(self, arg: PxBounds3, /) -> bool: ...

    @overload
    def getCenter(self) -> PxVec3: ...

    @overload
    def getCenter(self, arg: int, /) -> float: ...

    @overload
    def getExtents(self, arg: int, /) -> float: ...

    @overload
    def getExtents(self) -> PxVec3: ...

    def getDimensions(self) -> PxVec3: ...

    def scaleSafe(self, arg: float, /) -> None: ...

    def scaleFast(self, arg: float, /) -> None: ...

    def fattenSafe(self, arg: float, /) -> None: ...

    def fattenFast(self, arg: float, /) -> None: ...

    def isFinite(self) -> bool: ...

    def isValid(self) -> bool: ...

    def closestPoint(self, arg: PxVec3, /) -> PxVec3: ...

    @property
    def minimum(self) -> PxVec3: ...

    @minimum.setter
    def minimum(self, arg: PxVec3, /) -> None: ...

    @property
    def maximum(self) -> PxVec3: ...

    @maximum.setter
    def maximum(self, arg: PxVec3, /) -> None: ...

class PxBoxController(PxController):
    def getHalfHeight(self) -> float: ...

    def getHalfSideExtent(self) -> float: ...

    def getHalfForwardExtent(self) -> float: ...

    def setHalfHeight(self, arg: float, /) -> bool: ...

    def setHalfSideExtent(self, arg: float, /) -> bool: ...

    def setHalfForwardExtent(self, arg: float, /) -> bool: ...

class PxBoxControllerDesc(PxControllerDesc):
    def setToDefault(self) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def halfHeight(self) -> float: ...

    @halfHeight.setter
    def halfHeight(self, arg: float, /) -> None: ...

    @property
    def halfSideExtent(self) -> float: ...

    @halfSideExtent.setter
    def halfSideExtent(self, arg: float, /) -> None: ...

    @property
    def halfForwardExtent(self) -> float: ...

    @halfForwardExtent.setter
    def halfForwardExtent(self, arg: float, /) -> None: ...

class PxBoxGeometry(PxGeometry):
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, /) -> None: ...

    @overload
    def __init__(self, arg: PxVec3, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def halfExtents(self) -> PxVec3: ...

    @halfExtents.setter
    def halfExtents(self, arg: PxVec3, /) -> None: ...

class PxBoxObstacle(PxObstacle):
    def __init__(self) -> None: ...

    @property
    def mHalfExtents(self) -> PxVec3: ...

    @mHalfExtents.setter
    def mHalfExtents(self, arg: PxVec3, /) -> None: ...

class PxBroadPhaseCallback:
    pass

class PxBroadPhaseType(enum.Enum):
    eSAP = 0

    eMBP = 1

    eABP = 2

    ePABP = 3

    eGPU = 4

class PxCCDContactModifyCallback:
    pass

class PxCapsuleClimbingMode(enum.Enum):
    eEASY = 0

    eCONSTRAINED = 1

    eLAST = 2

class PxCapsuleController(PxController):
    def getRadius(self) -> float: ...

    def setRadius(self, arg: float, /) -> bool: ...

    def getHeight(self) -> float: ...

    def setHeight(self, arg: float, /) -> bool: ...

    def getClimbingMode(self) -> PxCapsuleClimbingMode: ...

    def setClimbingMode(self, arg: PxCapsuleClimbingMode, /) -> bool: ...

class PxCapsuleControllerDesc(PxControllerDesc):
    def setToDefault(self) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def radius(self) -> float: ...

    @radius.setter
    def radius(self, arg: float, /) -> None: ...

    @property
    def height(self) -> float: ...

    @height.setter
    def height(self, arg: float, /) -> None: ...

    @property
    def climbingMode(self) -> PxCapsuleClimbingMode: ...

    @climbingMode.setter
    def climbingMode(self, arg: PxCapsuleClimbingMode, /) -> None: ...

class PxCapsuleGeometry(PxGeometry):
    def __init__(self, arg0: float, arg1: float, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def radius(self) -> float: ...

    @radius.setter
    def radius(self, arg: float, /) -> None: ...

    @property
    def halfHeight(self) -> float: ...

    @halfHeight.setter
    def halfHeight(self, arg: float, /) -> None: ...

class PxCapsuleObstacle(PxObstacle):
    def __init__(self) -> None: ...

    @property
    def mHalfHeight(self) -> float: ...

    @mHalfHeight.setter
    def mHalfHeight(self, arg: float, /) -> None: ...

    @property
    def mRadius(self) -> float: ...

    @mRadius.setter
    def mRadius(self, arg: float, /) -> None: ...

class PxCombineMode(enum.Enum):
    eAVERAGE = 0

    eMIN = 1

    eMULTIPLY = 2

    eMAX = 3

class PxConeLimitedConstraint:
    def __init__(self) -> None: ...

    @property
    def mAxis(self) -> PxVec3: ...

    @mAxis.setter
    def mAxis(self, arg: PxVec3, /) -> None: ...

    @property
    def mAngle(self) -> float: ...

    @mAngle.setter
    def mAngle(self, arg: float, /) -> None: ...

    @property
    def mLowLimit(self) -> float: ...

    @mLowLimit.setter
    def mLowLimit(self, arg: float, /) -> None: ...

    @property
    def mHighLimit(self) -> float: ...

    @mHighLimit.setter
    def mHighLimit(self, arg: float, /) -> None: ...

    def isValid(self) -> bool: ...

    def setToDefault(self) -> None: ...

class PxConstraint:
    def write(self) -> None: ...

    def getScene(self) -> PxScene: ...

    def setActors(self, arg0: PxRigidActor, arg1: PxRigidActor, /) -> None: ...

    def markDirty(self) -> None: ...

    def setFlag(self, arg0: PxConstraintFlag, arg1: bool, /) -> None: ...

    def setFlags(self, arg: PxConstraintFlags, /) -> None: ...

    def getFlags(self) -> PxConstraintFlags: ...

    def getForce(self, arg0: PxVec3, arg1: PxVec3, /) -> None: ...

    def isValid(self) -> bool: ...

    def setBreakForce(self, arg0: float, arg1: float, /) -> None: ...

    def getBreakForce(self, arg0: float, arg1: float, /) -> None: ...

    def setMinResponseThreshold(self, arg: float, /) -> None: ...

    def getMinResponseThreshold(self) -> float: ...

class PxConstraintFlag(enum.Enum):
    eBROKEN = 1

    eCOLLISION_ENABLED = 8

    eVISUALIZATION = 16

    eDRIVE_LIMITS_ARE_FORCES = 32

    eIMPROVED_SLERP = 128

    eDISABLE_PREPROCESSING = 256

    eENABLE_EXTENDED_LIMITS = 512

    eGPU_COMPATIBLE = 1024

    eALWAYS_UPDATE = 2048

    eDISABLE_CONSTRAINT = 4096

class PxConstraintFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxConstraintFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxConstraintFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxConstraintFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxConstraintFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxConstraintFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxConstraintFlags, /) -> PxConstraintFlags: ...

    @overload
    def __or__(self, arg: PxConstraintFlag, /) -> PxConstraintFlags: ...

    @overload
    def __ior__(self, arg: PxConstraintFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxConstraintFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxConstraintFlags, /) -> PxConstraintFlags: ...

    @overload
    def __and__(self, arg: PxConstraintFlag, /) -> PxConstraintFlags: ...

    @overload
    def __iand__(self, arg: PxConstraintFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxConstraintFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxConstraintFlags, /) -> PxConstraintFlags: ...

    @overload
    def __xor__(self, arg: PxConstraintFlag, /) -> PxConstraintFlags: ...

    @overload
    def __ixor__(self, arg: PxConstraintFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxConstraintFlag, /) -> None: ...

    def __invert__(self) -> PxConstraintFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxConstraintFlag, /) -> None: ...

    def isSet(self, arg: PxConstraintFlag, /) -> bool: ...

    def setAll(self, arg: PxConstraintFlag, /) -> PxConstraintFlags: ...

class PxContactModifyCallback:
    pass

class PxController:
    def getType(self) -> PxControllerShapeType: ...

    def release(self) -> None: ...

    def move(self, arg0: PxVec3, arg1: float, arg2: float, arg3: PxControllerFilters, arg4: PxObstacleContext, /) -> int: ...

    def setPosition(self, arg: PxVec3d, /) -> bool: ...

    def getPosition(self) -> PxVec3d: ...

    def setFootPosition(self, arg: PxVec3d, /) -> bool: ...

    def getFootPosition(self) -> PxVec3d: ...

    def getActor(self) -> PxRigidDynamic: ...

    def setStepOffset(self, arg: float, /) -> None: ...

    def getStepOffset(self) -> float: ...

    def setNonWalkableMode(self, arg: PxControllerNonWalkableMode, /) -> None: ...

    def getNonWalkableMode(self) -> PxControllerNonWalkableMode: ...

    def getContactOffset(self) -> float: ...

    def setContactOffset(self, arg: float, /) -> None: ...

    def getUpDirection(self) -> PxVec3: ...

    def setUpDirection(self, arg: PxVec3, /) -> None: ...

    def getSlopeLimit(self) -> float: ...

    def setSlopeLimit(self, arg: float, /) -> None: ...

    @overload
    def invalidateCache(self) -> None: ...

    @overload
    def invalidateCache(self, arg: float, /) -> None: ...

    def getScene(self) -> PxScene: ...

    def getState(self, arg: PxControllerState, /) -> None: ...

    def getStats(self, arg: PxControllerStats, /) -> None: ...

class PxControllerBehaviorCallback:
    pass

class PxControllerCollisionFlag(enum.Enum):
    eCOLLISION_SIDES = 1

    eCOLLISION_UP = 2

    eCOLLISION_DOWN = 4

class PxControllerDesc:
    def isValid(self) -> bool: ...

    def getType(self) -> PxControllerShapeType: ...

    @property
    def position(self) -> PxVec3d: ...

    @position.setter
    def position(self, arg: PxVec3d, /) -> None: ...

    @property
    def upDirection(self) -> PxVec3: ...

    @upDirection.setter
    def upDirection(self, arg: PxVec3, /) -> None: ...

    @property
    def slopeLimit(self) -> float: ...

    @slopeLimit.setter
    def slopeLimit(self, arg: float, /) -> None: ...

    @property
    def invisibleWallHeight(self) -> float: ...

    @invisibleWallHeight.setter
    def invisibleWallHeight(self, arg: float, /) -> None: ...

    @property
    def maxJumpHeight(self) -> float: ...

    @maxJumpHeight.setter
    def maxJumpHeight(self, arg: float, /) -> None: ...

    @property
    def contactOffset(self) -> float: ...

    @contactOffset.setter
    def contactOffset(self, arg: float, /) -> None: ...

    @property
    def stepOffset(self) -> float: ...

    @stepOffset.setter
    def stepOffset(self, arg: float, /) -> None: ...

    @property
    def density(self) -> float: ...

    @density.setter
    def density(self, arg: float, /) -> None: ...

    @property
    def scaleCoeff(self) -> float: ...

    @scaleCoeff.setter
    def scaleCoeff(self, arg: float, /) -> None: ...

    @property
    def volumeGrowth(self) -> float: ...

    @volumeGrowth.setter
    def volumeGrowth(self, arg: float, /) -> None: ...

    @property
    def reportCallback(self) -> PxUserControllerHitReport: ...

    @reportCallback.setter
    def reportCallback(self, arg: PxUserControllerHitReport, /) -> None: ...

    @property
    def behaviorCallback(self) -> PxControllerBehaviorCallback: ...

    @behaviorCallback.setter
    def behaviorCallback(self, arg: PxControllerBehaviorCallback, /) -> None: ...

    @property
    def nonWalkableMode(self) -> PxControllerNonWalkableMode: ...

    @nonWalkableMode.setter
    def nonWalkableMode(self, arg: PxControllerNonWalkableMode, /) -> None: ...

    @property
    def material(self) -> PxMaterial: ...

    @material.setter
    def material(self, arg: PxMaterial, /) -> None: ...

    @property
    def registerDeletionListener(self) -> bool: ...

    @registerDeletionListener.setter
    def registerDeletionListener(self, arg: bool, /) -> None: ...

    @property
    def clientID(self) -> int: ...

    @clientID.setter
    def clientID(self, arg: int, /) -> None: ...

class PxControllerFilterCallback:
    pass

class PxControllerFilters:
    def __init__(self, arg0: PxFilterData, arg1: PxQueryFilterCallback, arg2: PxControllerFilterCallback, /) -> None: ...

class PxControllerHit:
    @property
    def controller(self) -> PxController: ...

    @controller.setter
    def controller(self, arg: PxController, /) -> None: ...

    @property
    def worldPos(self) -> PxVec3d: ...

    @worldPos.setter
    def worldPos(self, arg: PxVec3d, /) -> None: ...

    @property
    def worldNormal(self) -> PxVec3: ...

    @worldNormal.setter
    def worldNormal(self, arg: PxVec3, /) -> None: ...

    @property
    def dir(self) -> PxVec3: ...

    @dir.setter
    def dir(self, arg: PxVec3, /) -> None: ...

    @property
    def length(self) -> float: ...

    @length.setter
    def length(self, arg: float, /) -> None: ...

class PxControllerManager:
    def release(self) -> None: ...

    def getScene(self) -> PxScene: ...

    def getNbControllers(self) -> int: ...

    def createController(self, arg: PxControllerDesc, /) -> PxController: ...

    def purgeControllers(self) -> None: ...

    def getRenderBuffer(self) -> PxRenderBuffer: ...

    def setDebugRenderingFlags(self, flags: int) -> None: ...

    def getNbObstacleContexts(self) -> int: ...

    def getObstacleContext(self, arg: int, /) -> PxObstacleContext: ...

    def createObstacleContext(self) -> PxObstacleContext: ...

    def computeInteractions(self, arg0: float, arg1: PxControllerFilterCallback, /) -> None: ...

    def setTessellation(self, arg0: bool, arg1: float, /) -> None: ...

    def setOverlapRecoveryModule(self, arg: bool, /) -> None: ...

    def setPreciseSweeps(self, arg: bool, /) -> None: ...

    def setPreventVerticalSlidingAgainstCeiling(self, arg: bool, /) -> None: ...

    def shiftOrigin(self, arg: PxVec3, /) -> None: ...

class PxControllerNonWalkableMode(enum.Enum):
    ePREVENT_CLIMBING = 0

    ePREVENT_CLIMBING_AND_FORCE_SLIDING = 1

class PxControllerObstacleHit(PxControllerHit):
    pass

class PxControllerShapeHit(PxControllerHit):
    @property
    def shape(self) -> PxShape: ...

    @shape.setter
    def shape(self, arg: PxShape, /) -> None: ...

    @property
    def actor(self) -> PxRigidActor: ...

    @actor.setter
    def actor(self, arg: PxRigidActor, /) -> None: ...

    @property
    def triangleIndex(self) -> int: ...

    @triangleIndex.setter
    def triangleIndex(self, arg: int, /) -> None: ...

class PxControllerShapeType(enum.Enum):
    eBOX = 0

    eCAPSULE = 1

class PxControllerState:
    @property
    def deltaXP(self) -> PxVec3: ...

    @deltaXP.setter
    def deltaXP(self, arg: PxVec3, /) -> None: ...

    @property
    def touchedShape(self) -> PxShape: ...

    @touchedShape.setter
    def touchedShape(self, arg: PxShape, /) -> None: ...

    @property
    def touchedActor(self) -> PxRigidActor: ...

    @touchedActor.setter
    def touchedActor(self, arg: PxRigidActor, /) -> None: ...

    @property
    def touchedObstacleHandle(self) -> int: ...

    @touchedObstacleHandle.setter
    def touchedObstacleHandle(self, arg: int, /) -> None: ...

    @property
    def collisionFlags(self) -> int: ...

    @collisionFlags.setter
    def collisionFlags(self, arg: int, /) -> None: ...

    @property
    def standOnAnotherCCT(self) -> bool: ...

    @standOnAnotherCCT.setter
    def standOnAnotherCCT(self, arg: bool, /) -> None: ...

    @property
    def standOnObstacle(self) -> bool: ...

    @standOnObstacle.setter
    def standOnObstacle(self, arg: bool, /) -> None: ...

    @property
    def isMovingUp(self) -> bool: ...

    @isMovingUp.setter
    def isMovingUp(self, arg: bool, /) -> None: ...

class PxControllerStats:
    @property
    def nbIterations(self) -> int: ...

    @nbIterations.setter
    def nbIterations(self, arg: int, /) -> None: ...

    @property
    def nbFullUpdates(self) -> int: ...

    @nbFullUpdates.setter
    def nbFullUpdates(self, arg: int, /) -> None: ...

    @property
    def nbPartialUpdates(self) -> int: ...

    @nbPartialUpdates.setter
    def nbPartialUpdates(self, arg: int, /) -> None: ...

    @property
    def nbTessellation(self) -> int: ...

    @nbTessellation.setter
    def nbTessellation(self, arg: int, /) -> None: ...

class PxControllersHit(PxControllerHit):
    @property
    def other(self) -> PxController: ...

    @other.setter
    def other(self, arg: PxController, /) -> None: ...

class PxConvexMesh:
    def getNbVertices(self) -> int: ...

    def getVertices(self) -> PxVec3: ...

    def getIndexBuffer(self) -> int: ...

    def getNbPolygons(self) -> int: ...

    def getPolygonData(self, arg0: int, arg1: PxHullPolygon, /) -> bool: ...

    def release(self) -> None: ...

    def getMassInformation(self, arg0: float, arg1: PxMat33, arg2: PxVec3, /) -> None: ...

    def getLocalBounds(self) -> PxBounds3: ...

    def getSDF(self) -> float: ...

    def isGpuCompatible(self) -> bool: ...

class PxConvexMeshGeometry(PxGeometry):
    def __init__(self, arg0: PxMeshScale, arg1: int, /) -> PxConvexMeshGeometry: ...

    def isValid(self) -> bool: ...

class PxConvexMeshGeometryFlag(enum.Enum):
    eTIGHT_BOUNDS = 1

class PxCpuDispatcher:
    def getWorkerCount(self) -> int: ...

class PxCudaContextManager:
    def acquireContext(self) -> None: ...

    def releaseContext(self) -> None: ...

    def contextIsValid(self) -> bool: ...

    def supportsArchSM10(self) -> bool: ...

    def usingDedicatedGPU(self) -> int: ...

    def release(self) -> None: ...

class PxD6Axis(enum.Enum):
    eX = 0

    eY = 1

    eZ = 2

    eTWIST = 3

    eSWING1 = 4

    eSWING2 = 5

class PxD6Drive(enum.Enum):
    eX = 0

    eY = 1

    eZ = 2

    eSWING = 3

    eTWIST = 4

    eSLERP = 5

class PxD6Joint(PxJoint):
    def setMotion(self, arg0: PxD6Axis, arg1: PxD6Motion, /) -> None: ...

    def getMotion(self, arg: PxD6Axis, /) -> PxD6Motion: ...

    def getTwistAngle(self) -> float: ...

    def getSwingYAngle(self) -> float: ...

    def getSwingZAngle(self) -> float: ...

    def setDistanceLimit(self, arg: PxJointLinearLimit, /) -> None: ...

    def getDistanceLimit(self) -> PxJointLinearLimit: ...

    def setLinearLimit(self, arg0: PxD6Axis, arg1: PxJointLinearLimitPair, /) -> None: ...

    def getLinearLimit(self, arg: PxD6Axis, /) -> PxJointLinearLimitPair: ...

    def setTwistLimit(self, arg: PxJointAngularLimitPair, /) -> None: ...

    def getTwistLimit(self) -> PxJointAngularLimitPair: ...

    def setSwingLimit(self, arg: PxJointLimitCone, /) -> None: ...

    def getSwingLimit(self) -> PxJointLimitCone: ...

    def setPyramidSwingLimit(self, arg: PxJointLimitPyramid, /) -> None: ...

    def getPyramidSwingLimit(self) -> PxJointLimitPyramid: ...

    def setDrive(self, arg0: PxD6Drive, arg1: PxD6JointDrive, /) -> None: ...

    def getDrive(self, arg: PxD6Drive, /) -> PxD6JointDrive: ...

    def setDrivePosition(self, arg0: PxTransform, arg1: bool, /) -> None: ...

    def getDrivePosition(self) -> PxTransform: ...

    def setDriveVelocity(self, arg0: PxVec3, arg1: PxVec3, arg2: bool, /) -> None: ...

    def getDriveVelocity(self, arg0: PxVec3, arg1: PxVec3, /) -> None: ...

class PxD6JointDrive(PxSpring):
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: bool, /) -> None: ...

    @property
    def forceLimit(self) -> float: ...

    @forceLimit.setter
    def forceLimit(self, arg: float, /) -> None: ...

    @property
    def lower(self) -> float: ...

    @lower.setter
    def lower(self, arg: float, /) -> None: ...

    def isValid(self) -> bool: ...

class PxD6Motion(enum.Enum):
    eLOCKED = 0

    eLIMITED = 1

    eFREE = 2

class PxDebugLine:
    def __init__(self, arg0: PxVec3, arg1: PxVec3, arg2: int, /) -> None: ...

    @property
    def pos0(self) -> PxVec3: ...

    @pos0.setter
    def pos0(self, arg: PxVec3, /) -> None: ...

    @property
    def color0(self) -> int: ...

    @color0.setter
    def color0(self, arg: int, /) -> None: ...

    @property
    def pos1(self) -> PxVec3: ...

    @pos1.setter
    def pos1(self, arg: PxVec3, /) -> None: ...

    @property
    def color1(self) -> int: ...

    @color1.setter
    def color1(self, arg: int, /) -> None: ...

class PxDebugPoint:
    def __init__(self, arg0: PxVec3, arg1: int, /) -> None: ...

    @property
    def pos(self) -> PxVec3: ...

    @pos.setter
    def pos(self, arg: PxVec3, /) -> None: ...

    @property
    def color(self) -> int: ...

    @color.setter
    def color(self, arg: int, /) -> None: ...

class PxDebugTriangle:
    def __init__(self, arg0: PxVec3, arg1: PxVec3, arg2: PxVec3, arg3: int, /) -> None: ...

    @property
    def pos0(self) -> PxVec3: ...

    @pos0.setter
    def pos0(self, arg: PxVec3, /) -> None: ...

    @property
    def color0(self) -> int: ...

    @color0.setter
    def color0(self, arg: int, /) -> None: ...

    @property
    def pos1(self) -> PxVec3: ...

    @pos1.setter
    def pos1(self, arg: PxVec3, /) -> None: ...

    @property
    def color1(self) -> int: ...

    @color1.setter
    def color1(self, arg: int, /) -> None: ...

    @property
    def pos2(self) -> PxVec3: ...

    @pos2.setter
    def pos2(self, arg: PxVec3, /) -> None: ...

    @property
    def color2(self) -> int: ...

    @color2.setter
    def color2(self, arg: int, /) -> None: ...

class PxDefaultCpuDispatcher(PxCpuDispatcher):
    def setRunProfiled(self, arg: bool, /) -> None: ...

    def getRunProfiled(self) -> bool: ...

class PxDistanceJoint(PxJoint):
    def getDistance(self) -> float: ...

    def setMinDistance(self, arg: float, /) -> None: ...

    def getMinDistance(self) -> float: ...

    def setMaxDistance(self, arg: float, /) -> None: ...

    def getMaxDistance(self) -> float: ...

    def setTolerance(self, arg: float, /) -> None: ...

    def getTolerance(self) -> float: ...

    def setStiffness(self, arg: float, /) -> None: ...

    def getStiffness(self) -> float: ...

    def setDamping(self, arg: float, /) -> None: ...

    def getDamping(self) -> float: ...

    def setDistanceJointFlags(self, arg: int, /) -> None: ...

    def setDistanceJointFlag(self, arg0: PxDistanceJointFlag, arg1: bool, /) -> None: ...

class PxDistanceJointFlag(enum.Enum):
    eMAX_DISTANCE_ENABLED = 2

    eMIN_DISTANCE_ENABLED = 4

    eSPRING_ENABLED = 8

class PxEMPTY(enum.Enum):
    PxEmpty = 0

class PxErrorCode(enum.Enum):
    eNO_ERROR = 0

    eDEBUG_INFO = 1

    eDEBUG_WARNING = 2

    eINVALID_PARAMETER = 4

    eINVALID_OPERATION = 8

    eOUT_OF_MEMORY = 16

    eINTERNAL_ERROR = 32

    eABORT = 64

    ePERF_WARNING = 128

    eMASK_ALL = -1

class PxFEMClothMaterial(PxFEMMaterial):
    def setThickness(self, arg: float, /) -> None: ...

    def getThickness(self) -> float: ...

class PxFEMMaterial(PxBaseMaterial):
    def setYoungsModulus(self, arg: float, /) -> None: ...

    def getYoungsModulus(self) -> float: ...

    def setPoissons(self, arg: float, /) -> None: ...

    def getPoissons(self) -> float: ...

    def setDynamicFriction(self, arg: float, /) -> None: ...

    def getDynamicFriction(self) -> float: ...

class PxFEMParameters:
    def __init__(self) -> None: ...

    @property
    def velocityDamping(self) -> float: ...

    @velocityDamping.setter
    def velocityDamping(self, arg: float, /) -> None: ...

    @property
    def settlingThreshold(self) -> float: ...

    @settlingThreshold.setter
    def settlingThreshold(self, arg: float, /) -> None: ...

    @property
    def sleepThreshold(self) -> float: ...

    @sleepThreshold.setter
    def sleepThreshold(self, arg: float, /) -> None: ...

    @property
    def sleepDamping(self) -> float: ...

    @sleepDamping.setter
    def sleepDamping(self, arg: float, /) -> None: ...

    @property
    def selfCollisionFilterDistance(self) -> float: ...

    @selfCollisionFilterDistance.setter
    def selfCollisionFilterDistance(self, arg: float, /) -> None: ...

    @property
    def selfCollisionStressTolerance(self) -> float: ...

    @selfCollisionStressTolerance.setter
    def selfCollisionStressTolerance(self, arg: float, /) -> None: ...

class PxFEMSoftBodyMaterial(PxFEMMaterial):
    def setDamping(self, arg: float, /) -> None: ...

    def getDamping(self) -> float: ...

    def setDampingScale(self, arg: float, /) -> None: ...

    def getDampingScale(self) -> float: ...

    def setMaterialModel(self, arg: PxFEMSoftBodyMaterialModel, /) -> None: ...

    def getMaterialModel(self) -> PxFEMSoftBodyMaterialModel: ...

class PxFEMSoftBodyMaterialModel(enum.Enum):
    eCO_ROTATIONAL = 0

    eNEO_HOOKEAN = 1

class PxFilterData:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, /) -> None: ...

    @property
    def word0(self) -> int: ...

    @word0.setter
    def word0(self, arg: int, /) -> None: ...

    @property
    def word1(self) -> int: ...

    @word1.setter
    def word1(self, arg: int, /) -> None: ...

    @property
    def word2(self) -> int: ...

    @word2.setter
    def word2(self, arg: int, /) -> None: ...

    @property
    def word3(self) -> int: ...

    @word3.setter
    def word3(self, arg: int, /) -> None: ...

    def setToDefault(self) -> None: ...

class PxFixedJoint(PxJoint):
    pass

class PxForceMode(enum.Enum):
    eFORCE = 0

    eIMPULSE = 1

    eVELOCITY_CHANGE = 2

    eACCELERATION = 3

class PxFoundation:
    def release(self) -> None: ...

    def setErrorLevel(self, arg: PxErrorCode, /) -> None: ...

    def getErrorLevel(self) -> PxErrorCode: ...

    def getReportAllocationNames(self) -> bool: ...

    def setReportAllocationNames(self, arg: bool, /) -> None: ...

class PxFrictionType(enum.Enum):
    ePATCH = 0

class PxGearJoint(PxJoint):
    def setGearRatio(self, arg: float, /) -> None: ...

    def getGearRatio(self) -> float: ...

class PxGeomOverlapHit(PxQueryHit):
    def __init__(self) -> None: ...

class PxGeomRaycastHit(PxQueryHit):
    def __init__(self) -> None: ...

    @property
    def u(self) -> float: ...

    @u.setter
    def u(self, arg: float, /) -> None: ...

    @property
    def v(self) -> float: ...

    @v.setter
    def v(self, arg: float, /) -> None: ...

class PxGeomSweepHit(PxQueryHit):
    def __init__(self) -> None: ...

class PxGeometry:
    def getType(self) -> PxGeometryType: ...

class PxGeometryType(enum.Enum):
    eSPHERE = 0

    ePLANE = 1

    eCAPSULE = 2

    eBOX = 3

    eCONVEXMESH = 4

    ePARTICLESYSTEM = 5

    eTETRAHEDRONMESH = 6

    eTRIANGLEMESH = 7

    eHEIGHTFIELD = 8

    eHAIRSYSTEM = 9

    eCUSTOM = 10

class PxGpuDynamicsMemoryConfig:
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def tempBufferCapacity(self) -> int: ...

    @tempBufferCapacity.setter
    def tempBufferCapacity(self, arg: int, /) -> None: ...

    @property
    def maxRigidContactCount(self) -> int: ...

    @maxRigidContactCount.setter
    def maxRigidContactCount(self, arg: int, /) -> None: ...

    @property
    def maxRigidPatchCount(self) -> int: ...

    @maxRigidPatchCount.setter
    def maxRigidPatchCount(self, arg: int, /) -> None: ...

    @property
    def heapCapacity(self) -> int: ...

    @heapCapacity.setter
    def heapCapacity(self, arg: int, /) -> None: ...

    @property
    def foundLostPairsCapacity(self) -> int: ...

    @foundLostPairsCapacity.setter
    def foundLostPairsCapacity(self, arg: int, /) -> None: ...

    @property
    def foundLostAggregatePairsCapacity(self) -> int: ...

    @foundLostAggregatePairsCapacity.setter
    def foundLostAggregatePairsCapacity(self, arg: int, /) -> None: ...

    @property
    def totalAggregatePairsCapacity(self) -> int: ...

    @totalAggregatePairsCapacity.setter
    def totalAggregatePairsCapacity(self, arg: int, /) -> None: ...

    @property
    def maxSoftBodyContacts(self) -> int: ...

    @maxSoftBodyContacts.setter
    def maxSoftBodyContacts(self, arg: int, /) -> None: ...

    @property
    def maxFemClothContacts(self) -> int: ...

    @maxFemClothContacts.setter
    def maxFemClothContacts(self, arg: int, /) -> None: ...

    @property
    def maxParticleContacts(self) -> int: ...

    @maxParticleContacts.setter
    def maxParticleContacts(self, arg: int, /) -> None: ...

    @property
    def collisionStackSize(self) -> int: ...

    @collisionStackSize.setter
    def collisionStackSize(self, arg: int, /) -> None: ...

    @property
    def maxHairContacts(self) -> int: ...

    @maxHairContacts.setter
    def maxHairContacts(self, arg: int, /) -> None: ...

class PxHairSystemGeometry(PxGeometry):
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

class PxHeightField:
    def release(self) -> None: ...

    def modifySamples(self, arg0: int, arg1: int, arg2: PxHeightFieldDesc, arg3: bool, /) -> bool: ...

    def getNbRows(self) -> int: ...

    def getNbColumns(self) -> int: ...

    def getFormat(self) -> PxHeightFieldFormat: ...

    def getSampleStride(self) -> int: ...

    def getConvexEdgeThreshold(self) -> float: ...

    def getFlags(self) -> int: ...

    def getHeight(self, arg0: float, arg1: float, /) -> float: ...

    def getTriangleMaterialIndex(self, arg: int, /) -> int: ...

    def getTriangleNormal(self, arg: int, /) -> PxVec3: ...

    def getSample(self, arg0: int, arg1: int, /) -> PxHeightFieldSample: ...

    def getTimestamp(self) -> int: ...

class PxHeightFieldDesc:
    @property
    def nbRows(self) -> int: ...

    @nbRows.setter
    def nbRows(self, arg: int, /) -> None: ...

    @property
    def nbColumns(self) -> int: ...

    @nbColumns.setter
    def nbColumns(self, arg: int, /) -> None: ...

    @property
    def format(self) -> PxHeightFieldFormat: ...

    @format.setter
    def format(self, arg: PxHeightFieldFormat, /) -> None: ...

    @property
    def samples(self) -> PxStridedData: ...

    @samples.setter
    def samples(self, arg: PxStridedData, /) -> None: ...

    @property
    def convexEdgeThreshold(self) -> float: ...

    @convexEdgeThreshold.setter
    def convexEdgeThreshold(self, arg: float, /) -> None: ...

    def setToDefault(self) -> None: ...

    def isValid(self) -> bool: ...

class PxHeightFieldFormat(enum.Enum):
    eLOCKED = 1

class PxHeightFieldGeometry(PxGeometry):
    def __init__(self, arg0: int, arg1: float, arg2: float, arg3: float, /) -> PxHeightFieldGeometry: ...

    def isValid(self) -> bool: ...

class PxHeightFieldSample:
    @property
    def height(self) -> int: ...

    @height.setter
    def height(self, arg: int, /) -> None: ...

    def tessFlag(self) -> int: ...

    def setTessFlag(self) -> None: ...

    def clearTessFlag(self) -> None: ...

class PxHitFlag(enum.Enum):
    ePOSITION = 1

    eNORMAL = 2

    eUV = 8

    eASSUME_NO_INITIAL_OVERLAP = 16

    eANY_HIT = 32

    eMESH_MULTIPLE = 64

    eMESH_ANY = 32

    eMESH_BOTH_SIDES = 128

    ePRECISE_SWEEP = 256

    eMTD = 512

    eFACE_INDEX = 1024

    eDEFAULT = 1027

class PxHullPolygon:
    @property
    def mIndexBase(self) -> int: ...

    @mIndexBase.setter
    def mIndexBase(self, arg: int, /) -> None: ...

    @property
    def mNbVerts(self) -> int: ...

    @mNbVerts.setter
    def mNbVerts(self, arg: int, /) -> None: ...

    @property
    def mPlane(self) -> list[float]: ...

class PxIDENTITY(enum.Enum):
    PxIdentity = 0

class PxInputData(PxInputStream):
    def getLength(self) -> int: ...

    def seek(self, arg: int, /) -> None: ...

    def tell(self) -> int: ...

class PxInputStream:
    def write(self, arg: Annotated[ArrayLike, dict(dtype='uint8')], /) -> int: ...

class PxJoint:
    def setActors(self, arg0: PxRigidActor, arg1: PxRigidActor, /) -> None: ...

    def setLocalPose(self, arg0: PxJointActorIndex, arg1: PxTransform, /) -> None: ...

    def getLocalPose(self, arg: PxJointActorIndex, /) -> PxTransform: ...

    def getRelativeTransform(self) -> PxTransform: ...

    def getRelativeLinearVelocity(self) -> PxVec3: ...

    def getRelativeAngularVelocity(self) -> PxVec3: ...

    def setBreakForce(self, arg0: float, arg1: float, /) -> None: ...

    def setConstraintFlags(self, arg: int, /) -> None: ...

    def setConstraintFlag(self, arg0: PxConstraintFlag, arg1: bool, /) -> None: ...

    def getConstraintFlags(self) -> int: ...

    def setInvMassScale0(self, arg: float, /) -> None: ...

    def getInvMassScale0(self) -> float: ...

    def setInvInertiaScale0(self, arg: float, /) -> None: ...

    def getInvInertiaScale0(self) -> float: ...

    def setInvMassScale1(self, arg: float, /) -> None: ...

    def getInvMassScale1(self) -> float: ...

    def setInvInertiaScale1(self, arg: float, /) -> None: ...

    def getInvInertiaScale1(self) -> float: ...

    def getConstraint(self) -> PxConstraint: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

    def release(self) -> None: ...

    def getScene(self) -> PxScene: ...

class PxJointActorIndex(enum.Enum):
    eACTOR0 = 0

    eACTOR1 = 1

class PxJointAngularLimitPair(PxJointLimitParameters):
    @overload
    def __init__(self, arg0: float, arg1: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: PxSpring, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def upper(self) -> float: ...

    @upper.setter
    def upper(self, arg: float, /) -> None: ...

    @property
    def lower(self) -> float: ...

    @lower.setter
    def lower(self, arg: float, /) -> None: ...

class PxJointLimitCone(PxJointLimitParameters):
    @overload
    def __init__(self, arg0: float, arg1: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: PxSpring, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def upper(self) -> float: ...

    @upper.setter
    def upper(self, arg: float, /) -> None: ...

    @property
    def lower(self) -> float: ...

    @lower.setter
    def lower(self, arg: float, /) -> None: ...

class PxJointLimitParameters:
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

    def isSoft(self) -> bool: ...

    @property
    def restitution(self) -> float: ...

    @restitution.setter
    def restitution(self, arg: float, /) -> None: ...

    @property
    def bounceThreshold(self) -> float: ...

    @bounceThreshold.setter
    def bounceThreshold(self, arg: float, /) -> None: ...

    @property
    def stiffness(self) -> float: ...

    @stiffness.setter
    def stiffness(self, arg: float, /) -> None: ...

    @property
    def damping(self) -> float: ...

    @damping.setter
    def damping(self, arg: float, /) -> None: ...

class PxJointLimitPyramid(PxJointLimitParameters):
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: PxSpring, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def upper(self) -> float: ...

    @upper.setter
    def upper(self, arg: float, /) -> None: ...

    @property
    def lower(self) -> float: ...

    @lower.setter
    def lower(self, arg: float, /) -> None: ...

class PxJointLinearLimit(PxJointLimitParameters):
    @overload
    def __init__(self, arg: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: PxSpring, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def value(self) -> float: ...

    @value.setter
    def value(self, arg: float, /) -> None: ...

class PxJointLinearLimitPair(PxJointLimitParameters):
    @overload
    def __init__(self, arg0: PxTolerancesScale, arg1: float, arg2: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: PxSpring, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def upper(self) -> float: ...

    @upper.setter
    def upper(self, arg: float, /) -> None: ...

    @property
    def lower(self) -> float: ...

    @lower.setter
    def lower(self, arg: float, /) -> None: ...

class PxLocationHit(PxQueryHit):
    def __init__(self) -> None: ...

    @property
    def position(self) -> PxVec3: ...

    @position.setter
    def position(self, arg: PxVec3, /) -> None: ...

    @property
    def normal(self) -> PxVec3: ...

    @normal.setter
    def normal(self, arg: PxVec3, /) -> None: ...

    @property
    def distance(self) -> float: ...

    @distance.setter
    def distance(self, arg: float, /) -> None: ...

    def hadInitialOverlap(self) -> bool: ...

class PxMat33:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, col0: PxVec3, col1: PxVec3, col2: PxVec3) -> None: ...

    @overload
    def __init__(self, v: float) -> None: ...

    @overload
    def __init__(self) -> PxMat33: ...

    @overload
    def __init__(self, q: PxQuat) -> None: ...

    @staticmethod
    def createDiagonal(d: PxVec3) -> PxMat33: ...

    @staticmethod
    def outer(a: PxVec3, b: PxVec3) -> PxMat33: ...

    def getTranspose(self) -> PxMat33: ...

    def getInverse(self) -> PxMat33: ...

    def getDeterminant(self) -> float: ...

    def transform(self, other: PxVec3) -> PxVec3: ...

    def transformTranspose(self, other: PxVec3) -> PxVec3: ...

    def __iadd__(self, arg: PxMat33, /) -> PxMat33: ...

    def __add__(self, arg: PxMat33, /) -> PxMat33: ...

    def __isub__(self, arg: PxMat33, /) -> PxMat33: ...

    def __sub__(self, arg: PxMat33, /) -> PxMat33: ...

    @overload
    def __imul__(self, arg: PxMat33, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxMat33, /) -> PxMat33: ...

    @overload
    def __mul__(self, arg: float, /) -> PxMat33: ...

    def __neg__(self) -> PxMat33: ...

    def __getitem__(self, arg: tuple[int, int], /) -> float: ...

    def __setitem__(self, arg0: tuple[int, int], arg1: float, /) -> None: ...

class PxMat44:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, col0: PxVec4, col1: PxVec4, col2: PxVec4, col3: PxVec4) -> None: ...

    @overload
    def __init__(self, v: float) -> None: ...

    @overload
    def __init__(self) -> PxMat44: ...

    @overload
    def __init__(self, q: PxQuat) -> None: ...

    @overload
    def __init__(self, diagonal: PxVec4) -> None: ...

    @overload
    def __init__(self, axes: PxMat33, position: PxVec3) -> None: ...

    def getTranspose(self) -> PxMat44: ...

    @overload
    def transform(self, other: PxVec4) -> PxVec4: ...

    @overload
    def transform(self, other: PxVec3) -> PxVec3: ...

    @overload
    def rotate(self, other: PxVec4) -> PxVec4: ...

    @overload
    def rotate(self, other: PxVec3) -> PxVec3: ...

    def getBasis(self, num: int) -> PxVec3: ...

    def getPosition(self) -> PxVec3: ...

    def setPosition(self, position: PxVec3) -> None: ...

    def scale(self, p: PxVec4) -> None: ...

    def inverseRT(self) -> PxMat44: ...

    def isFinite(self) -> bool: ...

    def __iadd__(self, arg: PxMat44, /) -> PxMat44: ...

    def __add__(self, arg: PxMat44, /) -> PxMat44: ...

    def __isub__(self, arg: PxMat44, /) -> PxMat44: ...

    def __sub__(self, arg: PxMat44, /) -> PxMat44: ...

    @overload
    def __imul__(self, arg: PxMat44, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxMat44, /) -> PxMat44: ...

    @overload
    def __mul__(self, arg: float, /) -> PxMat44: ...

    def __neg__(self) -> PxMat44: ...

    def __getitem__(self, arg: tuple[int, int], /) -> float: ...

    def __setitem__(self, arg0: tuple[int, int], arg1: float, /) -> None: ...

class PxMaterial(PxBaseMaterial):
    def setDynamicFriction(self, coef: float) -> None: ...

    def getDynamicFriction(self) -> float: ...

    def setStaticFriction(self, coef: float) -> None: ...

    def getStaticFriction(self) -> float: ...

    def setRestitution(self, rest: float) -> None: ...

    def getRestitution(self) -> float: ...

    def setDamping(self, damping: float) -> None: ...

    def getDamping(self) -> float: ...

    def setFrictionCombineMode(self, combMode: PxCombineMode) -> None: ...

    def getFrictionCombineMode(self) -> PxCombineMode: ...

    def setRestitutionCombineMode(self, combMode: PxCombineMode) -> None: ...

    def getRestitutionCombineMode(self) -> PxCombineMode: ...

    def setDampingCombineMode(self, combMode: PxCombineMode) -> None: ...

    def getDampingCombineMode(self) -> PxCombineMode: ...

class PxMeshScale:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: float, /) -> None: ...

    @overload
    def __init__(self, arg: PxVec3, /) -> None: ...

    @overload
    def __init__(self, arg0: PxVec3, arg1: PxQuat, /) -> None: ...

    def isIdentity(self) -> bool: ...

    def getInverse(self) -> PxMeshScale: ...

    def toMat33(self) -> PxMat33: ...

    def hasNegativeDeterminant(self) -> bool: ...

    def transform(self, arg: PxVec3, /) -> PxVec3: ...

    def isValidForTriangleMesh(self) -> bool: ...

    def isValidForConvexMesh(self) -> bool: ...

class PxObstacle:
    def getType(self) -> PxGeometryType: ...

class PxObstacleContext:
    def release(self) -> None: ...

    def getControllerManager(self) -> PxControllerManager: ...

    def addObstacle(self, arg: PxObstacle, /) -> int: ...

    def removeObstacle(self, arg: int, /) -> bool: ...

    def updateObstacle(self, arg0: int, arg1: PxObstacle, /) -> bool: ...

    def getNbObstacles(self) -> int: ...

    def getObstacle(self, arg: int, /) -> PxObstacle: ...

    def getObstacleByHandle(self, arg: int, /) -> PxObstacle: ...

class PxOutputStream:
    def write(self, arg: Annotated[ArrayLike, dict(dtype='uint8')], /) -> int: ...

class PxOverlapHit(PxGeomOverlapHit):
    def __init__(self) -> None: ...

class PxPBDMaterial(PxBaseMaterial):
    def setFriction(self, arg: float, /) -> None: ...

    def getFriction(self) -> float: ...

    def setDamping(self, arg: float, /) -> None: ...

    def getDamping(self) -> float: ...

    def setAdhesion(self, arg: float, /) -> None: ...

    def getAdhesion(self) -> float: ...

    def setGravityScale(self, arg: float, /) -> None: ...

    def getGravityScale(self) -> float: ...

    def setAdhesionRadiusScale(self, arg: float, /) -> None: ...

    def getAdhesionRadiusScale(self) -> float: ...

    def setViscosity(self, arg: float, /) -> None: ...

    def getViscosity(self) -> float: ...

    def setVorticityConfinement(self, arg: float, /) -> None: ...

    def getVorticityConfinement(self) -> float: ...

    def setSurfaceTension(self, arg: float, /) -> None: ...

    def getSurfaceTension(self) -> float: ...

    def setCohesion(self, arg: float, /) -> None: ...

    def getCohesion(self) -> float: ...

    def setLift(self, arg: float, /) -> None: ...

    def getLift(self) -> float: ...

    def setDrag(self, arg: float, /) -> None: ...

    def getDrag(self) -> float: ...

    def setCFLCoefficient(self, arg: float, /) -> None: ...

    def getCFLCoefficient(self) -> float: ...

    def setParticleFrictionScale(self, arg: float, /) -> None: ...

    def getParticleFrictionScale(self) -> float: ...

    def setParticleAdhesionScale(self, arg: float, /) -> None: ...

    def getParticleAdhesionScale(self) -> float: ...

class PxPBDParticleSystem(PxActor):
    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSimulationFilterData(self) -> PxFilterData: ...

    def setSimulationFilterData(self, arg: PxFilterData, /) -> None: ...

    def setParticleFlag(self, arg0: PxParticleFlag, arg1: bool, /) -> None: ...

    def setParticleFlags(self, arg: PxParticleFlags, /) -> None: ...

    def getParticleFlags(self) -> PxParticleFlags: ...

    def setMaxDepenetrationVelocity(self, arg: float, /) -> None: ...

    def getMaxDepenetrationVelocity(self) -> float: ...

    def setMaxVelocity(self, arg: float, /) -> None: ...

    def getMaxVelocity(self) -> float: ...

    def getCudaContextManager(self) -> PxCudaContextManager: ...

    def setRestOffset(self, arg: float, /) -> None: ...

    def getRestOffset(self) -> float: ...

    def setContactOffset(self, arg: float, /) -> None: ...

    def getContactOffset(self) -> float: ...

    def setParticleContactOffset(self, arg: float, /) -> None: ...

    def getParticleContactOffset(self) -> float: ...

    def setSolidRestOffset(self, arg: float, /) -> None: ...

    def getSolidRestOffset(self) -> float: ...

    def addRigidAttachment(self, arg: PxRigidActor, /) -> None: ...

    def removeRigidAttachment(self, arg: PxRigidActor, /) -> None: ...

    def enableCCD(self, arg: bool, /) -> None: ...

    def setParticleLockFlag(self, arg0: PxParticleLockFlag, arg1: bool, /) -> None: ...

    def setParticleLockFlags(self, arg: PxParticleLockFlags, /) -> None: ...

    def getParticleLockFlags(self) -> PxParticleLockFlags: ...

    def createPhase(self, arg0: PxPBDMaterial, arg1: PxParticlePhaseFlags, /) -> int: ...

    def getNbParticleMaterials(self) -> int: ...

    def addParticleBuffer(self, arg: PxParticleBuffer, /) -> None: ...

    def removeParticleBuffer(self, arg: PxParticleBuffer, /) -> None: ...

    def getGpuParticleSystemIndex(self) -> int: ...

    def setWind(self, arg: PxVec3, /) -> None: ...

    def getWind(self) -> PxVec3: ...

    def setFluidBoundaryDensityScale(self, arg: float, /) -> None: ...

    def getFluidBoundaryDensityScale(self) -> float: ...

    def setFluidRestOffset(self, arg: float, /) -> None: ...

    def getFluidRestOffset(self) -> float: ...

    def setGridSizeX(self, arg: int, /) -> None: ...

    def getGridSizeX(self) -> int: ...

    def setGridSizeY(self, arg: int, /) -> None: ...

    def getGridSizeY(self) -> int: ...

    def setGridSizeZ(self, arg: int, /) -> None: ...

    def getGridSizeZ(self) -> int: ...

class PxPairFilteringMode(enum.Enum):
    eSUPPRESS = 1

    eDEFAULT = 1

class PxParticleBuffer:
    def setNbActiveParticles(self, arg: int, /) -> None: ...

    def getNbActiveParticles(self) -> int: ...

    def getMaxParticles(self) -> int: ...

    def getNbParticleVolumes(self) -> int: ...

    def setNbParticleVolumes(self, arg: int, /) -> None: ...

    def getMaxParticleVolumes(self) -> int: ...

    def getFlatListStartIndex(self) -> int: ...

    def raiseFlags(self, arg: PxParticleBufferFlag, /) -> None: ...

    def release(self) -> None: ...

    def getUniqueId(self) -> int: ...

class PxParticleBufferFlag(enum.Enum):
    eNONE = 0

    eUPDATE_POSITION = 1

    eUPDATE_VELOCITY = 2

    eUPDATE_PHASE = 4

    eUPDATE_RESTPOSITION = 8

    eUPDATE_CLOTH = 32

    eUPDATE_RIGID = 64

    eUPDATE_DIFFUSE_PARAM = 128

    eUPDATE_ATTACHMENTS = 256

    eALL = 495

class PxParticleBufferFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxParticleBufferFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxParticleBufferFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxParticleBufferFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticleBufferFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticleBufferFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxParticleBufferFlags, /) -> PxParticleBufferFlags: ...

    @overload
    def __or__(self, arg: PxParticleBufferFlag, /) -> PxParticleBufferFlags: ...

    @overload
    def __ior__(self, arg: PxParticleBufferFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxParticleBufferFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxParticleBufferFlags, /) -> PxParticleBufferFlags: ...

    @overload
    def __and__(self, arg: PxParticleBufferFlag, /) -> PxParticleBufferFlags: ...

    @overload
    def __iand__(self, arg: PxParticleBufferFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxParticleBufferFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxParticleBufferFlags, /) -> PxParticleBufferFlags: ...

    @overload
    def __xor__(self, arg: PxParticleBufferFlag, /) -> PxParticleBufferFlags: ...

    @overload
    def __ixor__(self, arg: PxParticleBufferFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxParticleBufferFlag, /) -> None: ...

    def __invert__(self) -> PxParticleBufferFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxParticleBufferFlag, /) -> None: ...

    def isSet(self, arg: PxParticleBufferFlag, /) -> bool: ...

    def setAll(self, arg: PxParticleBufferFlag, /) -> PxParticleBufferFlags: ...

class PxParticleFlag(enum.Enum):
    eDISABLE_SELF_COLLISION = 1

    eDISABLE_RIGID_COLLISION = 2

    eFULL_DIFFUSE_ADVECTION = 4

    eENABLE_SPECULATIVE_CCD = 8

class PxParticleFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxParticleFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxParticleFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxParticleFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticleFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticleFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxParticleFlags, /) -> PxParticleFlags: ...

    @overload
    def __or__(self, arg: PxParticleFlag, /) -> PxParticleFlags: ...

    @overload
    def __ior__(self, arg: PxParticleFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxParticleFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxParticleFlags, /) -> PxParticleFlags: ...

    @overload
    def __and__(self, arg: PxParticleFlag, /) -> PxParticleFlags: ...

    @overload
    def __iand__(self, arg: PxParticleFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxParticleFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxParticleFlags, /) -> PxParticleFlags: ...

    @overload
    def __xor__(self, arg: PxParticleFlag, /) -> PxParticleFlags: ...

    @overload
    def __ixor__(self, arg: PxParticleFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxParticleFlag, /) -> None: ...

    def __invert__(self) -> PxParticleFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxParticleFlag, /) -> None: ...

    def isSet(self, arg: PxParticleFlag, /) -> bool: ...

    def setAll(self, arg: PxParticleFlag, /) -> PxParticleFlags: ...

class PxParticleLockFlag(enum.Enum):
    eLOCK_X = 1

    eLOCK_Y = 2

    eLOCK_Z = 4

class PxParticleLockFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxParticleLockFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxParticleLockFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxParticleLockFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticleLockFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticleLockFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxParticleLockFlags, /) -> PxParticleLockFlags: ...

    @overload
    def __or__(self, arg: PxParticleLockFlag, /) -> PxParticleLockFlags: ...

    @overload
    def __ior__(self, arg: PxParticleLockFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxParticleLockFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxParticleLockFlags, /) -> PxParticleLockFlags: ...

    @overload
    def __and__(self, arg: PxParticleLockFlag, /) -> PxParticleLockFlags: ...

    @overload
    def __iand__(self, arg: PxParticleLockFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxParticleLockFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxParticleLockFlags, /) -> PxParticleLockFlags: ...

    @overload
    def __xor__(self, arg: PxParticleLockFlag, /) -> PxParticleLockFlags: ...

    @overload
    def __ixor__(self, arg: PxParticleLockFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxParticleLockFlag, /) -> None: ...

    def __invert__(self) -> PxParticleLockFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxParticleLockFlag, /) -> None: ...

    def isSet(self, arg: PxParticleLockFlag, /) -> bool: ...

    def setAll(self, arg: PxParticleLockFlag, /) -> PxParticleLockFlags: ...

class PxParticlePhaseFlag(enum.Enum):
    eParticlePhaseGroupMask = 1048575

    eParticlePhaseFlagsMask = 4293918720

    eParticlePhaseSelfCollide = 1048576

    eParticlePhaseSelfCollideFilter = 2097152

    eParticlePhaseFluid = 4194304

class PxParticlePhaseFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxParticlePhaseFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxParticlePhaseFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxParticlePhaseFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticlePhaseFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxParticlePhaseFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxParticlePhaseFlags, /) -> PxParticlePhaseFlags: ...

    @overload
    def __or__(self, arg: PxParticlePhaseFlag, /) -> PxParticlePhaseFlags: ...

    @overload
    def __ior__(self, arg: PxParticlePhaseFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxParticlePhaseFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxParticlePhaseFlags, /) -> PxParticlePhaseFlags: ...

    @overload
    def __and__(self, arg: PxParticlePhaseFlag, /) -> PxParticlePhaseFlags: ...

    @overload
    def __iand__(self, arg: PxParticlePhaseFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxParticlePhaseFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxParticlePhaseFlags, /) -> PxParticlePhaseFlags: ...

    @overload
    def __xor__(self, arg: PxParticlePhaseFlag, /) -> PxParticlePhaseFlags: ...

    @overload
    def __ixor__(self, arg: PxParticlePhaseFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxParticlePhaseFlag, /) -> None: ...

    def __invert__(self) -> PxParticlePhaseFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxParticlePhaseFlag, /) -> None: ...

    def isSet(self, arg: PxParticlePhaseFlag, /) -> bool: ...

    def setAll(self, arg: PxParticlePhaseFlag, /) -> PxParticlePhaseFlags: ...

class PxParticleSolverType(enum.Enum):
    eNONE = 1

class PxParticleSystemGeometry(PxGeometry):
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

class PxPhysics:
    def getFoundation(self) -> PxFoundation: ...

    def createAggregate(self, arg0: int, arg1: int, arg2: int, /) -> PxAggregate: ...

    def getTolerancesScale(self) -> PxTolerancesScale: ...

    def createTriangleMesh(self, arg: PxInputStream, /) -> PxTriangleMesh: ...

    def getNbTriangleMeshes(self) -> int: ...

    def createTetrahedronMesh(self, arg: PxInputStream, /) -> PxTetrahedronMesh: ...

    def createSoftBodyMesh(self, arg: PxInputStream, /) -> PxSoftBodyMesh: ...

    def getNbTetrahedronMeshes(self) -> int: ...

    def createHeightField(self, arg: PxInputStream, /) -> PxHeightField: ...

    def getNbHeightFields(self) -> int: ...

    def createConvexMesh(self, arg: PxInputStream, /) -> PxConvexMesh: ...

    def getNbConvexMeshes(self) -> int: ...

    def getNbBVHs(self) -> int: ...

    def createScene(self, arg: PxSceneDesc, /) -> PxScene: ...

    def getNbScenes(self) -> int: ...

    def createRigidStatic(self, arg: PxTransform, /) -> PxRigidStatic: ...

    def createRigidDynamic(self, arg: PxTransform, /) -> PxRigidDynamic: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: PxMaterial, arg2: int, /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: PxFEMSoftBodyMaterial, arg2: int, /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: Sequence[PxMaterial], arg2: bool, arg3: int, /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: Sequence[PxFEMSoftBodyMaterial], arg2: bool, arg3: int, /) -> PxShape: ...

    @overload
    def createShape(self, arg0: PxGeometry, arg1: Sequence[PxFEMClothMaterial], arg2: bool, arg3: int, /) -> PxShape: ...

    def getNbShapes(self) -> int: ...

    def createArticulationReducedCoordinate(self) -> PxArticulationReducedCoordinate: ...

    def createMaterial(self, arg0: float, arg1: float, arg2: float, /) -> PxMaterial: ...

    def getNbMaterials(self) -> int: ...

    def createFEMSoftBodyMaterial(self, arg0: float, arg1: float, arg2: float, /) -> PxFEMSoftBodyMaterial: ...

    def getNbFEMSoftBodyMaterials(self) -> int: ...

    def createFEMClothMaterial(self, arg0: float, arg1: float, arg2: float, arg3: float, /) -> PxFEMClothMaterial: ...

    def getNbFEMClothMaterials(self) -> int: ...

    def createPBDMaterial(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, /) -> PxPBDMaterial: ...

    def getNbPBDMaterials(self) -> int: ...

class PxPlaneGeometry(PxGeometry):
    def __init__(self) -> None: ...

    def isValid(self) -> bool: ...

class PxPrismaticJoint(PxJoint):
    def getPosition(self) -> float: ...

    def getVelocity(self) -> float: ...

    def setLimit(self, arg: PxJointLinearLimitPair, /) -> None: ...

    def getLimit(self) -> PxJointLinearLimitPair: ...

    def setPrismaticJointFlags(self, arg: int, /) -> None: ...

    def setPrismaticJointFlag(self, arg0: PxPrismaticJointFlag, arg1: bool, /) -> None: ...

    def getPrismaticJointFlags(self, arg: int, /) -> int: ...

class PxPrismaticJointFlag(enum.Enum):
    eLIMIT_ENABLED = 2

class PxPruningStructure:
    def release(self) -> None: ...

    def getNbRigidActors(self) -> int: ...

class PxPruningStructureType(enum.Enum):
    eNONE = 0

    eDYNAMIC_AABB_TREE = 1

    eSTATIC_AABB_TREE = 2

class PxQuat:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float, nw: float) -> None: ...

    @overload
    def __init__(self, angleRadians: float, unitAxis: PxVec3) -> None: ...

    @overload
    def __init__(self, m: PxMat33) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    def isIdentity(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isUnit(self) -> bool: ...

    def isSane(self) -> bool: ...

    def toRadiansAndUnitAxis(self, angle: float, axis: PxVec3) -> None: ...

    @overload
    def getAngle(self) -> float: ...

    @overload
    def getAngle(self, arg: PxQuat, /) -> float: ...

    def magnitudeSquared(self) -> float: ...

    def dot(self, v: PxQuat) -> float: ...

    def getNormalized(self) -> PxQuat: ...

    def magnitude(self) -> float: ...

    def normalize(self) -> float: ...

    def getConjugate(self) -> PxQuat: ...

    def getImaginaryPart(self) -> PxVec3: ...

    def getBasisVector0(self) -> PxVec3: ...

    def getBasisVector1(self) -> PxVec3: ...

    def getBasisVector2(self) -> PxVec3: ...

    def rotate(self, v: PxVec3) -> PxVec3: ...

    def rotateInv(self, v: PxVec3) -> PxVec3: ...

    def __iadd__(self, arg: PxQuat, /) -> PxQuat: ...

    def __add__(self, arg: PxQuat, /) -> PxQuat: ...

    def __isub__(self, arg: PxQuat, /) -> PxQuat: ...

    def __sub__(self, arg: PxQuat, /) -> PxQuat: ...

    @overload
    def __imul__(self, arg: PxQuat, /) -> None: ...

    @overload
    def __imul__(self, arg: float, /) -> None: ...

    @overload
    def __mul__(self, arg: PxQuat, /) -> PxQuat: ...

    @overload
    def __mul__(self, arg: float, /) -> PxQuat: ...

    def __neg__(self) -> PxQuat: ...

    def __eq__(self, arg: PxQuat, /) -> bool: ...

class PxQueryCache:
    def __init__(self) -> None: ...

    @property
    def faceIndex(self) -> int: ...

    @faceIndex.setter
    def faceIndex(self, arg: int, /) -> None: ...

    @property
    def actor(self) -> PxRigidActor: ...

    @actor.setter
    def actor(self, arg: PxRigidActor, /) -> None: ...

    @property
    def shape(self) -> PxShape: ...

    @shape.setter
    def shape(self, arg: PxShape, /) -> None: ...

class PxQueryFilterCallback:
    pass

class PxQueryFilterData:
    def __init__(self) -> None: ...

class PxQueryFlag(enum.Enum):
    eSTATIC = 1

    eDYNAMIC = 2

    ePREFILTER = 4

    ePOSTFILTER = 8

    eANY_HIT = 16

    eNO_BLOCK = 32

    eBATCH_QUERY_LEGACY_BEHAVIOUR = 64

    eDISABLE_HARDCODED_FILTER = 64

class PxQueryHit:
    def __init__(self) -> None: ...

    @property
    def faceIndex(self) -> int: ...

    @faceIndex.setter
    def faceIndex(self, arg: int, /) -> None: ...

class PxQueryHitType(enum.Enum):
    eNONE = 0

    eBLOCK = 2

    eTOUCH = 1

class PxRackAndPinionJoint(PxJoint):
    def setRatio(self, arg: float, /) -> None: ...

    def getRatio(self) -> float: ...

    def setData(self, arg0: int, arg1: int, arg2: float, /) -> bool: ...

class PxRaycastHit(PxGeomRaycastHit):
    def __init__(self) -> None: ...

class PxRenderBuffer:
    def getNbPoints(self) -> int: ...

    def addPoint(self, arg: PxDebugPoint, /) -> None: ...

    def getNbLines(self) -> int: ...

    def addLine(self, arg: PxDebugLine, /) -> None: ...

    def getNbTriangles(self) -> int: ...

    def addTriangle(self, arg: PxDebugTriangle, /) -> None: ...

    def append(self, arg: PxRenderBuffer, /) -> None: ...

    def clear(self) -> None: ...

    def shift(self, arg: PxVec3, /) -> None: ...

    def empty(self) -> bool: ...

class PxResidual:
    @property
    def rmsResidual(self) -> float: ...

    @rmsResidual.setter
    def rmsResidual(self, arg: float, /) -> None: ...

    @property
    def maxResidual(self) -> float: ...

    @maxResidual.setter
    def maxResidual(self, arg: float, /) -> None: ...

class PxResiduals:
    @property
    def positionIterationResidual(self) -> PxResidual: ...

    @positionIterationResidual.setter
    def positionIterationResidual(self, arg: PxResidual, /) -> None: ...

    @property
    def velocityIterationResidual(self) -> PxResidual: ...

    @velocityIterationResidual.setter
    def velocityIterationResidual(self, arg: PxResidual, /) -> None: ...

class PxRevoluteJoint(PxJoint):
    def getAngle(self) -> float: ...

    def getVelocity(self) -> float: ...

    def setLimit(self, arg: PxJointAngularLimitPair, /) -> None: ...

    def getLimit(self) -> PxJointAngularLimitPair: ...

    def setDriveVelocity(self, arg0: float, arg1: bool, /) -> None: ...

    def getDriveVelocity(self) -> float: ...

    def setDriveForceLimit(self, arg: float, /) -> None: ...

    def getDriveForceLimit(self) -> float: ...

    def setDriveGearRatio(self, arg: float, /) -> None: ...

    def getDriveGearRatio(self) -> float: ...

    def setRevoluteJointFlags(self, arg: int, /) -> None: ...

    def setRevoluteJointFlag(self, arg0: PxRevoluteJointFlag, arg1: bool, /) -> None: ...

    def getRevoluteJointFlags(self, arg: int, /) -> int: ...

class PxRevoluteJointFlag(enum.Enum):
    eLIMIT_ENABLED = 1

    eDRIVE_ENABLED = 2

    eDRIVE_FREESPIN = 4

class PxRigidActor(PxActor):
    def release(self) -> None: ...

    def getInternalActorIndex(self) -> int: ...

    def getGlobalPose(self) -> PxTransform: ...

    def setGlobalPose(self, arg0: PxTransform, arg1: bool, /) -> None: ...

    def attachShape(self, arg: PxShape, /) -> bool: ...

    def detachShape(self, arg0: PxShape, arg1: bool, /) -> None: ...

    def getNbShapes(self) -> int: ...

    def getNbConstraints(self) -> int: ...

class PxRigidBody(PxRigidActor):
    def setCMassLocalPose(self, arg: PxTransform, /) -> None: ...

    def getCMassLocalPose(self) -> PxTransform: ...

    def setMass(self, arg: float, /) -> None: ...

    def getMass(self) -> float: ...

    def getInvMass(self) -> float: ...

    def setMassSpaceInertiaTensor(self, arg: PxVec3, /) -> None: ...

    def getMassSpaceInertiaTensor(self) -> PxVec3: ...

    def getMassSpaceInvInertiaTensor(self) -> PxVec3: ...

    def setLinearDamping(self, arg: float, /) -> None: ...

    def getLinearDamping(self) -> float: ...

    def setAngularDamping(self, arg: float, /) -> None: ...

    def getAngularDamping(self) -> float: ...

    def getLinearVelocity(self) -> PxVec3: ...

    def getAngularVelocity(self) -> PxVec3: ...

    def setMaxLinearVelocity(self, arg: float, /) -> None: ...

    def getMaxLinearVelocity(self) -> float: ...

    def setMaxAngularVelocity(self, arg: float, /) -> None: ...

    def getMaxAngularVelocity(self) -> float: ...

    def getLinearAcceleration(self) -> PxVec3: ...

    def getAngularAcceleration(self) -> PxVec3: ...

    def addForce(self, arg0: PxVec3, arg1: PxForceMode, arg2: bool, /) -> None: ...

    def addTorque(self, arg0: PxVec3, arg1: PxForceMode, arg2: bool, /) -> None: ...

    def clearForce(self, arg: PxForceMode, /) -> None: ...

    def clearTorque(self, arg: PxForceMode, /) -> None: ...

    def setForceAndTorque(self, arg0: PxVec3, arg1: PxVec3, arg2: PxForceMode, /) -> None: ...

    def setRigidBodyFlag(self, arg0: PxRigidBodyFlag, arg1: bool, /) -> None: ...

    def setRigidBodyFlags(self, arg: PxRigidBodyFlags, /) -> None: ...

    def getRigidBodyFlags(self) -> PxRigidBodyFlags: ...

    def setMinCCDAdvanceCoefficient(self, arg: float, /) -> None: ...

    def getMinCCDAdvanceCoefficient(self) -> float: ...

    def setMaxDepenetrationVelocity(self, arg: float, /) -> None: ...

    def getMaxDepenetrationVelocity(self) -> float: ...

    def setMaxContactImpulse(self, arg: float, /) -> None: ...

    def getMaxContactImpulse(self) -> float: ...

    def setContactSlopCoefficient(self, arg: float, /) -> None: ...

    def getContactSlopCoefficient(self) -> float: ...

class PxRigidBodyFlag(enum.Enum):
    eKINEMATIC = 1

    eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = 2

    eENABLE_CCD = 4

    eENABLE_CCD_FRICTION = 8

    eENABLE_SPECULATIVE_CCD = 16

    eENABLE_POSE_INTEGRATION_PREVIEW = 32

    eENABLE_CCD_MAX_CONTACT_IMPULSE = 64

    eRETAIN_ACCELERATIONS = 128

    eFORCE_KINE_KINE_NOTIFICATIONS = 256

    eFORCE_STATIC_KINE_NOTIFICATIONS = 512

    eENABLE_GYROSCOPIC_FORCES = 1024

class PxRigidBodyFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxRigidBodyFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxRigidBodyFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxRigidBodyFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxRigidBodyFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxRigidBodyFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxRigidBodyFlags, /) -> PxRigidBodyFlags: ...

    @overload
    def __or__(self, arg: PxRigidBodyFlag, /) -> PxRigidBodyFlags: ...

    @overload
    def __ior__(self, arg: PxRigidBodyFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxRigidBodyFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxRigidBodyFlags, /) -> PxRigidBodyFlags: ...

    @overload
    def __and__(self, arg: PxRigidBodyFlag, /) -> PxRigidBodyFlags: ...

    @overload
    def __iand__(self, arg: PxRigidBodyFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxRigidBodyFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxRigidBodyFlags, /) -> PxRigidBodyFlags: ...

    @overload
    def __xor__(self, arg: PxRigidBodyFlag, /) -> PxRigidBodyFlags: ...

    @overload
    def __ixor__(self, arg: PxRigidBodyFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxRigidBodyFlag, /) -> None: ...

    def __invert__(self) -> PxRigidBodyFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxRigidBodyFlag, /) -> None: ...

    def isSet(self, arg: PxRigidBodyFlag, /) -> bool: ...

    def setAll(self, arg: PxRigidBodyFlag, /) -> PxRigidBodyFlags: ...

class PxRigidDynamic(PxRigidBody):
    def setKinematicTarget(self, arg: PxTransform, /) -> None: ...

    def getKinematicTarget(self, arg: PxTransform, /) -> bool: ...

    def isSleeping(self) -> bool: ...

    def setSleepThreshold(self, arg: float, /) -> None: ...

    def getSleepThreshold(self) -> float: ...

    def setStabilizationThreshold(self, arg: float, /) -> None: ...

    def getStabilizationThreshold(self) -> float: ...

    def setWakeCounter(self, arg: float, /) -> None: ...

    def getWakeCounter(self) -> float: ...

    def wakeUp(self) -> None: ...

    def putToSleep(self) -> None: ...

    def setRigidDynamicLockFlags(self, arg: PxRigidDynamicLockFlags, /) -> None: ...

    def setRigidDynamicLockFlag(self, arg0: PxRigidDynamicLockFlag, arg1: bool, /) -> None: ...

    def getRigidDynamicLockFlags(self) -> PxRigidDynamicLockFlags: ...

    def getLinearVelocity(self) -> PxVec3: ...

    def setLinearVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def getAngularVelocity(self) -> PxVec3: ...

    def setAngularVelocity(self, arg0: PxVec3, arg1: bool, /) -> None: ...

    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getContactReportThreshold(self) -> float: ...

    def setContactReportThreshold(self, arg: float, /) -> None: ...

    def getGPUIndex(self) -> int: ...

class PxRigidDynamicLockFlag(enum.Enum):
    eLOCK_LINEAR_X = 1

    eLOCK_LINEAR_Y = 2

    eLOCK_LINEAR_Z = 4

    eLOCK_ANGULAR_X = 8

    eLOCK_ANGULAR_Y = 16

    eLOCK_ANGULAR_Z = 32

class PxRigidDynamicLockFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxRigidDynamicLockFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxRigidDynamicLockFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxRigidDynamicLockFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxRigidDynamicLockFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxRigidDynamicLockFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxRigidDynamicLockFlags, /) -> PxRigidDynamicLockFlags: ...

    @overload
    def __or__(self, arg: PxRigidDynamicLockFlag, /) -> PxRigidDynamicLockFlags: ...

    @overload
    def __ior__(self, arg: PxRigidDynamicLockFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxRigidDynamicLockFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxRigidDynamicLockFlags, /) -> PxRigidDynamicLockFlags: ...

    @overload
    def __and__(self, arg: PxRigidDynamicLockFlag, /) -> PxRigidDynamicLockFlags: ...

    @overload
    def __iand__(self, arg: PxRigidDynamicLockFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxRigidDynamicLockFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxRigidDynamicLockFlags, /) -> PxRigidDynamicLockFlags: ...

    @overload
    def __xor__(self, arg: PxRigidDynamicLockFlag, /) -> PxRigidDynamicLockFlags: ...

    @overload
    def __ixor__(self, arg: PxRigidDynamicLockFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxRigidDynamicLockFlag, /) -> None: ...

    def __invert__(self) -> PxRigidDynamicLockFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxRigidDynamicLockFlag, /) -> None: ...

    def isSet(self, arg: PxRigidDynamicLockFlag, /) -> bool: ...

    def setAll(self, arg: PxRigidDynamicLockFlag, /) -> PxRigidDynamicLockFlags: ...

class PxRigidStatic(PxRigidActor):
    pass

class PxScene:
    def release(self) -> None: ...

    def setFlag(self, arg0: PxSceneFlag, arg1: bool, /) -> None: ...

    def getFlags(self) -> int: ...

    def setLimits(self, arg: PxSceneLimits, /) -> None: ...

    def getLimits(self) -> PxSceneLimits: ...

    def getPhysics(self) -> PxPhysics: ...

    def getTimestamp(self) -> int: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

    def addArticulation(self, arg: PxArticulationReducedCoordinate, /) -> bool: ...

    def removeArticulation(self, arg0: PxArticulationReducedCoordinate, arg1: bool, /) -> None: ...

    def addActor(self, arg: PxActor, /) -> bool: ...

    def addActors(self, arg: Sequence[PxActor], /) -> None: ...

    def removeActor(self, arg0: PxActor, arg1: bool, /) -> None: ...

    def removeActors(self, arg0: Sequence[PxActor], arg1: bool, /) -> None: ...

    def addAggregate(self, arg: PxAggregate, /) -> bool: ...

    def removeAggregate(self, arg0: PxAggregate, arg1: bool, /) -> None: ...

    def getNbActors(self, arg: int, /) -> int: ...

    def getNbSoftBodies(self) -> int: ...

    def getNbParticleSystems(self, arg: PxParticleSolverType, /) -> int: ...

    def getNbPBDParticleSystems(self) -> int: ...

    def getNbFEMCloths(self) -> int: ...

    def getNbHairSystems(self) -> int: ...

    def getNbArticulations(self) -> int: ...

    def getNbConstraints(self) -> int: ...

    def getNbAggregates(self) -> int: ...

class PxSceneDesc:
    def __init__(self, arg: PxTolerancesScale, /) -> None: ...

    def setToDefault(self, arg: PxTolerancesScale, /) -> None: ...

    def isValid(self) -> bool: ...

    def getTolerancesScale(self) -> PxTolerancesScale: ...

    @property
    def gravity(self) -> PxVec3: ...

    @gravity.setter
    def gravity(self, arg: PxVec3, /) -> None: ...

    @property
    def simulationEventCallback(self) -> PxSimulationEventCallback: ...

    @simulationEventCallback.setter
    def simulationEventCallback(self, arg: PxSimulationEventCallback, /) -> None: ...

    @property
    def contactModifyCallback(self) -> PxContactModifyCallback: ...

    @contactModifyCallback.setter
    def contactModifyCallback(self, arg: PxContactModifyCallback, /) -> None: ...

    @property
    def ccdContactModifyCallback(self) -> PxCCDContactModifyCallback: ...

    @ccdContactModifyCallback.setter
    def ccdContactModifyCallback(self, arg: PxCCDContactModifyCallback, /) -> None: ...

    @property
    def filterShaderDataSize(self) -> int: ...

    @filterShaderDataSize.setter
    def filterShaderDataSize(self, arg: int, /) -> None: ...

    @property
    def filterCallback(self) -> PxSimulationFilterCallback: ...

    @filterCallback.setter
    def filterCallback(self, arg: PxSimulationFilterCallback, /) -> None: ...

    @property
    def kineKineFilteringMode(self) -> PxPairFilteringMode: ...

    @kineKineFilteringMode.setter
    def kineKineFilteringMode(self, arg: PxPairFilteringMode, /) -> None: ...

    @property
    def staticKineFilteringMode(self) -> PxPairFilteringMode: ...

    @staticKineFilteringMode.setter
    def staticKineFilteringMode(self, arg: PxPairFilteringMode, /) -> None: ...

    @property
    def broadPhaseType(self) -> PxBroadPhaseType: ...

    @broadPhaseType.setter
    def broadPhaseType(self, arg: PxBroadPhaseType, /) -> None: ...

    @property
    def broadPhaseCallback(self) -> PxBroadPhaseCallback: ...

    @broadPhaseCallback.setter
    def broadPhaseCallback(self, arg: PxBroadPhaseCallback, /) -> None: ...

    @property
    def limits(self) -> PxSceneLimits: ...

    @limits.setter
    def limits(self, arg: PxSceneLimits, /) -> None: ...

    @property
    def frictionType(self) -> PxFrictionType: ...

    @frictionType.setter
    def frictionType(self, arg: PxFrictionType, /) -> None: ...

    @property
    def solverType(self) -> PxSolverType: ...

    @solverType.setter
    def solverType(self, arg: PxSolverType, /) -> None: ...

    @property
    def bounceThresholdVelocity(self) -> float: ...

    @bounceThresholdVelocity.setter
    def bounceThresholdVelocity(self, arg: float, /) -> None: ...

    @property
    def frictionOffsetThreshold(self) -> float: ...

    @frictionOffsetThreshold.setter
    def frictionOffsetThreshold(self, arg: float, /) -> None: ...

    @property
    def frictionCorrelationDistance(self) -> float: ...

    @frictionCorrelationDistance.setter
    def frictionCorrelationDistance(self, arg: float, /) -> None: ...

    @property
    def cpuDispatcher(self) -> PxCpuDispatcher: ...

    @cpuDispatcher.setter
    def cpuDispatcher(self, arg: PxCpuDispatcher, /) -> None: ...

    @property
    def cudaContextManager(self) -> PxCudaContextManager: ...

    @cudaContextManager.setter
    def cudaContextManager(self, arg: PxCudaContextManager, /) -> None: ...

    @property
    def solverBatchSize(self) -> int: ...

    @solverBatchSize.setter
    def solverBatchSize(self, arg: int, /) -> None: ...

    @property
    def solverArticulationBatchSize(self) -> int: ...

    @solverArticulationBatchSize.setter
    def solverArticulationBatchSize(self, arg: int, /) -> None: ...

    @property
    def nbContactDataBlocks(self) -> int: ...

    @nbContactDataBlocks.setter
    def nbContactDataBlocks(self, arg: int, /) -> None: ...

    @property
    def maxNbContactDataBlocks(self) -> int: ...

    @maxNbContactDataBlocks.setter
    def maxNbContactDataBlocks(self, arg: int, /) -> None: ...

    @property
    def maxBiasCoefficient(self) -> float: ...

    @maxBiasCoefficient.setter
    def maxBiasCoefficient(self, arg: float, /) -> None: ...

    @property
    def contactReportStreamBufferSize(self) -> int: ...

    @contactReportStreamBufferSize.setter
    def contactReportStreamBufferSize(self, arg: int, /) -> None: ...

    @property
    def ccdMaxPasses(self) -> int: ...

    @ccdMaxPasses.setter
    def ccdMaxPasses(self, arg: int, /) -> None: ...

    @property
    def ccdThreshold(self) -> float: ...

    @ccdThreshold.setter
    def ccdThreshold(self, arg: float, /) -> None: ...

    @property
    def ccdMaxSeparation(self) -> float: ...

    @ccdMaxSeparation.setter
    def ccdMaxSeparation(self, arg: float, /) -> None: ...

    @property
    def wakeCounterResetValue(self) -> float: ...

    @wakeCounterResetValue.setter
    def wakeCounterResetValue(self, arg: float, /) -> None: ...

    @property
    def sanityBounds(self) -> PxBounds3: ...

    @sanityBounds.setter
    def sanityBounds(self, arg: PxBounds3, /) -> None: ...

    @property
    def gpuDynamicsConfig(self) -> PxGpuDynamicsMemoryConfig: ...

    @gpuDynamicsConfig.setter
    def gpuDynamicsConfig(self, arg: PxGpuDynamicsMemoryConfig, /) -> None: ...

    @property
    def gpuMaxNumPartitions(self) -> int: ...

    @gpuMaxNumPartitions.setter
    def gpuMaxNumPartitions(self, arg: int, /) -> None: ...

    @property
    def gpuMaxNumStaticPartitions(self) -> int: ...

    @gpuMaxNumStaticPartitions.setter
    def gpuMaxNumStaticPartitions(self, arg: int, /) -> None: ...

    @property
    def gpuComputeVersion(self) -> int: ...

    @gpuComputeVersion.setter
    def gpuComputeVersion(self, arg: int, /) -> None: ...

    @property
    def contactPairSlabSize(self) -> int: ...

    @contactPairSlabSize.setter
    def contactPairSlabSize(self, arg: int, /) -> None: ...

    @property
    def sceneQuerySystem(self) -> PxSceneQuerySystem: ...

    @sceneQuerySystem.setter
    def sceneQuerySystem(self, arg: PxSceneQuerySystem, /) -> None: ...

class PxSceneFlag(enum.Enum):
    eENABLE_ACTIVE_ACTORS  = 1

    eENABLE_CCD = 2

    eDISABLE_CCD_RESWEEP = 4

    eENABLE_PCM = 64

    eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = 128

    eDISABLE_CONTACT_CACHE = 256

    eREQUIRE_RW_LOCK = 512

    eENABLE_STABILIZATION = 1024

    eENABLE_AVERAGE_POINT = 2048

    eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS = 4096

    eENABLE_GPU_DYNAMICS = 8192

    eENABLE_ENHANCED_DETERMINISM = 16384

    eENABLE_FRICTION_EVERY_ITERATION = 32768

    eENABLE_EXTERNAL_FORCES_EVERY_ITERATION_TGS = 65536

    eENABLE_DIRECT_GPU_API = 131072

    eENABLE_BODY_ACCELERATIONS = 262144

    eENABLE_SOLVER_RESIDUAL_REPORTING = 524288

class PxSceneLimits:
    def __init__(self) -> None: ...

    def setToDefault(self) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def maxNbActors(self) -> int: ...

    @maxNbActors.setter
    def maxNbActors(self, arg: int, /) -> None: ...

    @property
    def maxNbBodies(self) -> int: ...

    @maxNbBodies.setter
    def maxNbBodies(self, arg: int, /) -> None: ...

    @property
    def maxNbStaticShapes(self) -> int: ...

    @maxNbStaticShapes.setter
    def maxNbStaticShapes(self, arg: int, /) -> None: ...

    @property
    def maxNbDynamicShapes(self) -> int: ...

    @maxNbDynamicShapes.setter
    def maxNbDynamicShapes(self, arg: int, /) -> None: ...

    @property
    def maxNbAggregates(self) -> int: ...

    @maxNbAggregates.setter
    def maxNbAggregates(self, arg: int, /) -> None: ...

    @property
    def maxNbConstraints(self) -> int: ...

    @maxNbConstraints.setter
    def maxNbConstraints(self, arg: int, /) -> None: ...

    @property
    def maxNbRegions(self) -> int: ...

    @maxNbRegions.setter
    def maxNbRegions(self, arg: int, /) -> None: ...

    @property
    def maxNbBroadPhaseOverlaps(self) -> int: ...

    @maxNbBroadPhaseOverlaps.setter
    def maxNbBroadPhaseOverlaps(self, arg: int, /) -> None: ...

class PxSceneQueryExt:
    def __init__(self) -> None: ...

    @staticmethod
    def overlapAny(arg0: PxScene, arg1: PxGeometry, arg2: PxTransform, arg3: PxOverlapHit, arg4: PxQueryFilterData, arg5: PxQueryFilterCallback, /) -> bool: ...

    @staticmethod
    def overlapMultiple(arg0: PxScene, arg1: PxGeometry, arg2: PxTransform, arg3: PxOverlapHit, arg4: int, arg5: PxQueryFilterData, arg6: PxQueryFilterCallback, /) -> int: ...

    @staticmethod
    def raycastAny(arg0: PxScene, arg1: PxVec3, arg2: PxVec3, arg3: float, arg4: PxQueryHit, arg5: PxQueryFilterData, arg6: PxQueryFilterCallback, arg7: PxQueryCache, /) -> bool: ...

    @staticmethod
    def raycastMultiple(arg0: PxScene, arg1: PxVec3, arg2: PxVec3, arg3: float, arg4: "physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>", arg5: PxRaycastHit, arg6: int, arg7: bool, arg8: PxQueryFilterData, arg9: PxQueryFilterCallback, arg10: PxQueryCache, /) -> None: ...

    @staticmethod
    def raycastSingle(arg0: PxScene, arg1: PxVec3, arg2: PxVec3, arg3: float, arg4: "physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>", arg5: PxRaycastHit, arg6: PxQueryFilterData, arg7: PxQueryFilterCallback, arg8: PxQueryCache, /) -> bool: ...

    @staticmethod
    def sweepAny(arg0: PxScene, arg1: PxGeometry, arg2: PxTransform, arg3: PxVec3, arg4: float, arg5: "physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>", arg6: PxQueryHit, arg7: PxQueryFilterData, arg8: PxQueryFilterCallback, arg9: PxQueryCache, arg10: float, /) -> bool: ...

    @staticmethod
    def sweepMultiple(arg0: PxScene, arg1: PxGeometry, arg2: PxTransform, arg3: PxVec3, arg4: float, arg5: "physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>", arg6: PxSweepHit, arg7: int, arg8: bool, arg9: PxQueryFilterData, arg10: PxQueryFilterCallback, arg11: PxQueryCache, arg12: float, /) -> int: ...

    @staticmethod
    def sweepSingle(arg0: PxScene, arg1: PxGeometry, arg2: PxTransform, arg3: PxVec3, arg4: float, arg5: "physx::PxFlags<physx::PxHitFlag::Enum, unsigned short>", arg6: PxSweepHit, arg7: PxQueryFilterData, arg8: PxQueryFilterCallback, arg9: PxQueryCache, arg10: float, /) -> bool: ...

class PxSceneQuerySystem(PxSceneQuerySystemBase):
    def release(self) -> None: ...

    def acquireReference(self) -> None: ...

    def preallocate(self, arg0: int, arg1: int, /) -> None: ...

    def flushMemory(self) -> None: ...

    def addSQShape(self, arg0: PxRigidActor, arg1: PxShape, arg2: PxBounds3, arg3: PxTransform, arg4: int, arg5: bool, /) -> None: ...

    def removeSQShape(self, arg0: PxRigidActor, arg1: PxShape, /) -> None: ...

    def updateSQShape(self, arg0: PxRigidActor, arg1: PxShape, arg2: PxTransform, /) -> None: ...

    def removeSQCompound(self, arg: int, /) -> None: ...

    def updateSQCompound(self, arg0: int, arg1: PxTransform, /) -> None: ...

    def shiftOrigin(self, arg: PxVec3, /) -> None: ...

    def merge(self, arg: PxPruningStructure, /) -> None: ...

    def getHandle(self, arg0: PxRigidActor, arg1: PxShape, arg2: int, /) -> int: ...

    def finalizeUpdates(self) -> None: ...

class PxSceneQuerySystemBase:
    def setDynamicTreeRebuildRateHint(self, arg: int, /) -> None: ...

    def getDynamicTreeRebuildRateHint(self) -> int: ...

    def forceRebuildDynamicTree(self, arg: int, /) -> None: ...

    def setUpdateMode(self, arg: PxSceneQueryUpdateMode, /) -> None: ...

    def getUpdateMode(self) -> PxSceneQueryUpdateMode: ...

    def getStaticTimestamp(self) -> int: ...

    def flushUpdates(self) -> None: ...

class PxSceneQueryUpdateMode(enum.Enum):
    eBUILD_ENABLED_COMMIT_ENABLED = 0

    eBUILD_ENABLED_COMMIT_DISABLED = 1

    eBUILD_DISABLED_COMMIT_DISABLED = 2

class PxSceneSQSystem(PxSceneQuerySystemBase):
    def setSceneQueryUpdateMode(self, arg: PxSceneQueryUpdateMode, /) -> None: ...

    def getSceneQueryUpdateMode(self) -> PxSceneQueryUpdateMode: ...

    def getSceneQueryStaticTimestamp(self) -> int: ...

    def flushQueryUpdates(self) -> None: ...

    def forceDynamicTreeRebuild(self, arg0: bool, arg1: bool, /) -> None: ...

    def getStaticStructure(self) -> PxPruningStructureType: ...

    def getDynamicStructure(self) -> PxPruningStructureType: ...

    def checkQueries(self, arg: bool, /) -> bool: ...

    def fetchQueries(self, arg: bool, /) -> bool: ...

class PxShape:
    def release(self) -> None: ...

    def setGeometry(self, arg: PxGeometry, /) -> None: ...

    def getGeometry(self) -> PxGeometry: ...

    def getActor(self) -> PxRigidActor: ...

    def setLocalPose(self, arg: PxTransform, /) -> None: ...

    def getLocalPose(self) -> PxTransform: ...

    def setSimulationFilterData(self, arg: PxFilterData, /) -> None: ...

    def getSimulationFilterData(self) -> PxFilterData: ...

    def setQueryFilterData(self, arg: PxFilterData, /) -> None: ...

    def getQueryFilterData(self) -> PxFilterData: ...

    def getNbMaterials(self) -> int: ...

    def setContactOffset(self, arg: float, /) -> None: ...

    def getContactOffset(self) -> float: ...

    def setRestOffset(self, arg: float, /) -> None: ...

    def getRestOffset(self) -> float: ...

    def setDensityForFluid(self, arg: float, /) -> None: ...

    def getDensityForFluid(self) -> float: ...

    def setTorsionalPatchRadius(self, arg: float, /) -> None: ...

    def getTorsionalPatchRadius(self) -> float: ...

    def setMinTorsionalPatchRadius(self, arg: float, /) -> None: ...

    def getMinTorsionalPatchRadius(self) -> float: ...

    def getGPUIndex(self) -> int: ...

    def setFlag(self, arg0: PxShapeFlag, arg1: bool, /) -> None: ...

    def setFlags(self, arg: int, /) -> None: ...

    def getFlags(self, arg: int, /) -> int: ...

    def isExclusive(self) -> bool: ...

    def setName(self, arg: str, /) -> None: ...

    def getName(self) -> str: ...

class PxShapeFlag(enum.Enum):
    eSIMULATION_SHAPE = 1

    eSCENE_QUERY_SHAPE = 2

    eTRIGGER_SHAPE = 4

    eVISUALIZATION = 8

class PxSimulationEventCallback:
    pass

class PxSimulationFilterCallback:
    pass

class PxSoftBody(PxActor):
    def setSoftBodyFlag(self, arg0: PxSoftBodyFlag, arg1: bool, /) -> None: ...

    def setSoftBodyFlags(self, arg: PxSoftBodyFlags, /) -> None: ...

    def getSoftBodyFlags(self) -> PxSoftBodyFlags: ...

    def setParameter(self, arg: PxFEMParameters, /) -> None: ...

    def getParameter(self) -> PxFEMParameters: ...

    def getPositionInvMassBufferD(self) -> PxVec4: ...

    def getRestPositionBufferD(self) -> PxVec4: ...

    def getSimPositionInvMassBufferD(self) -> PxVec4: ...

    def getSimVelocityBufferD(self) -> PxVec4: ...

    def markDirty(self, arg: "physx::PxFlags<physx::PxSoftBodyDataFlag::Enum, unsigned int>", /) -> None: ...

    def setKinematicTargetBufferD(self, arg0: Sequence[PxVec4], arg1: PxSoftBodyFlags, /) -> None: ...

    def getCudaContextManager(self) -> PxCudaContextManager: ...

    def setWakeCounter(self, arg: float, /) -> None: ...

    def getWakeCounter(self) -> float: ...

    def isSleeping(self) -> bool: ...

    def setSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getSolverIterationCounts(self, arg0: int, arg1: int, /) -> None: ...

    def getShape(self) -> PxShape: ...

    def getCollisionMesh(self) -> PxTetrahedronMesh: ...

    def getSimulationMesh(self) -> PxTetrahedronMesh: ...

    def getSoftBodyAuxData(self) -> PxSoftBodyAuxData: ...

    def attachShape(self, arg: PxShape, /) -> bool: ...

    def attachSimulationMesh(self, arg0: PxTetrahedronMesh, arg1: PxSoftBodyAuxData, /) -> bool: ...

    def detachShape(self) -> None: ...

    def detachSimulationMesh(self) -> None: ...

    def release(self) -> None: ...

    def addParticleFilter(self, arg0: PxPBDParticleSystem, arg1: PxParticleBuffer, arg2: int, arg3: int, /) -> None: ...

    def removeParticleFilter(self, arg0: PxPBDParticleSystem, arg1: PxParticleBuffer, arg2: int, arg3: int, /) -> None: ...

    def addParticleAttachment(self, arg0: PxPBDParticleSystem, arg1: PxParticleBuffer, arg2: int, arg3: int, arg4: PxVec4, /) -> int: ...

    def removeParticleAttachment(self, arg0: PxPBDParticleSystem, arg1: int, /) -> None: ...

    def addRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def removeRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def addRigidAttachment(self, arg0: PxRigidActor, arg1: int, arg2: PxVec3, arg3: PxConeLimitedConstraint, /) -> int: ...

    def removeRigidAttachment(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def addTetRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def removeTetRigidFilter(self, arg0: PxRigidActor, arg1: int, /) -> None: ...

    def addTetRigidAttachment(self, arg0: PxRigidActor, arg1: int, arg2: PxVec4, arg3: PxVec3, arg4: PxConeLimitedConstraint, /) -> int: ...

    def addSoftBodyFilter(self, arg0: PxSoftBody, arg1: int, arg2: int, /) -> None: ...

    def removeSoftBodyFilter(self, arg0: PxSoftBody, arg1: int, arg2: int, /) -> None: ...

    def addSoftBodyFilters(self, arg0: PxSoftBody, arg1: int, arg2: int, arg3: int, /) -> None: ...

    def removeSoftBodyFilters(self, arg0: PxSoftBody, arg1: int, arg2: int, arg3: int, /) -> None: ...

    def addSoftBodyAttachment(self, arg0: PxSoftBody, arg1: int, arg2: PxVec4, arg3: int, arg4: PxVec4, arg5: PxConeLimitedConstraint, arg6: float, /) -> int: ...

    def removeSoftBodyAttachment(self, arg0: PxSoftBody, arg1: int, /) -> None: ...

    def getWorldBounds(self, arg: float, /) -> PxBounds3: ...

    def getGpuSoftBodyIndex(self) -> int: ...

class PxSoftBodyAuxData:
    def release(self) -> None: ...

class PxSoftBodyDataFlag(enum.Enum):
    eNONE = 0

    ePOSITION_INVMASS = 1

    eSIM_POSITION_INVMASS = 2

    eSIM_VELOCITY = 4

    eREST_POSITION_INVMASS = 8

    eALL = 15

class PxSoftBodyFlag(enum.Enum):
    eDISABLE_SELF_COLLISION = 1

    eCOMPUTE_STRESS_TENSOR = 2

    eENABLE_CCD = 4

    eDISPLAY_SIM_MESH = 8

    eKINEMATIC = 16

    ePARTIALLY_KINEMATIC = 32

class PxSoftBodyFlags:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: PxSoftBodyFlag, /) -> None: ...

    @overload
    def __init__(self, arg: int, /) -> None: ...

    @overload
    def __ne__(self, arg: PxSoftBodyFlags, /) -> bool: ...

    @overload
    def __ne__(self, arg: PxSoftBodyFlag, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxSoftBodyFlags, /) -> bool: ...

    @overload
    def __eq__(self, arg: PxSoftBodyFlag, /) -> bool: ...

    @overload
    def __or__(self, arg: PxSoftBodyFlags, /) -> PxSoftBodyFlags: ...

    @overload
    def __or__(self, arg: PxSoftBodyFlag, /) -> PxSoftBodyFlags: ...

    @overload
    def __ior__(self, arg: PxSoftBodyFlags, /) -> None: ...

    @overload
    def __ior__(self, arg: PxSoftBodyFlag, /) -> None: ...

    @overload
    def __and__(self, arg: PxSoftBodyFlags, /) -> PxSoftBodyFlags: ...

    @overload
    def __and__(self, arg: PxSoftBodyFlag, /) -> PxSoftBodyFlags: ...

    @overload
    def __iand__(self, arg: PxSoftBodyFlags, /) -> None: ...

    @overload
    def __iand__(self, arg: PxSoftBodyFlag, /) -> None: ...

    @overload
    def __xor__(self, arg: PxSoftBodyFlags, /) -> PxSoftBodyFlags: ...

    @overload
    def __xor__(self, arg: PxSoftBodyFlag, /) -> PxSoftBodyFlags: ...

    @overload
    def __ixor__(self, arg: PxSoftBodyFlags, /) -> None: ...

    @overload
    def __ixor__(self, arg: PxSoftBodyFlag, /) -> None: ...

    def __invert__(self) -> PxSoftBodyFlags: ...

    def value(self) -> int: ...

    def clear(self, arg: PxSoftBodyFlag, /) -> None: ...

    def isSet(self, arg: PxSoftBodyFlag, /) -> bool: ...

    def setAll(self, arg: PxSoftBodyFlag, /) -> PxSoftBodyFlags: ...

class PxSoftBodyMesh:
    @overload
    def getCollisionMesh(self) -> PxTetrahedronMesh: ...

    @overload
    def getCollisionMesh(self) -> PxTetrahedronMesh: ...

class PxSolverType(enum.Enum):
    ePGS = 0

    eTGS = 1

class PxSpatialForce:
    @property
    def force(self) -> PxVec3: ...

    @force.setter
    def force(self, arg: PxVec3, /) -> None: ...

    @property
    def torque(self) -> PxVec3: ...

    @torque.setter
    def torque(self, arg: PxVec3, /) -> None: ...

class PxSpatialVelocity:
    @property
    def linear(self) -> PxVec3: ...

    @linear.setter
    def linear(self, arg: PxVec3, /) -> None: ...

    @property
    def angular(self) -> PxVec3: ...

    @angular.setter
    def angular(self, arg: PxVec3, /) -> None: ...

class PxSphereGeometry(PxGeometry):
    def __init__(self, arg: float, /) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def radius(self) -> float: ...

    @radius.setter
    def radius(self, arg: float, /) -> None: ...

class PxSphericalJoint(PxJoint):
    def getLimitCone(self) -> PxJointLimitCone: ...

    def setLimitCone(self, arg: PxJointLimitCone, /) -> None: ...

    def getSwingYAngle(self) -> float: ...

    def getSwingZAngle(self) -> float: ...

    def setSphericalJointFlags(self, arg: int, /) -> None: ...

    def setSphericalJointFlag(self, arg0: PxSphericalJointFlag, arg1: bool, /) -> None: ...

    def getSphericalJointFlags(self, arg: int, /) -> int: ...

class PxSphericalJointFlag(enum.Enum):
    eLIMIT_ENABLED = 2

class PxSpring:
    def __init__(self, arg0: float, arg1: float, /) -> None: ...

    @property
    def upper(self) -> float: ...

    @upper.setter
    def upper(self, arg: float, /) -> None: ...

    @property
    def lower(self) -> float: ...

    @lower.setter
    def lower(self, arg: float, /) -> None: ...

class PxStridedData:
    pass

class PxSweepHit(PxGeomSweepHit):
    def __init__(self) -> None: ...

class PxTetrahedronMesh:
    def getNbVertices(self) -> int: ...

    def getVertices(self) -> PxVec3: ...

    def getNbTetrahedrons(self) -> int: ...

    def getTetrahedronMeshFlags(self) -> int: ...

    def getLocalBounds(self) -> PxBounds3: ...

    def release(self) -> None: ...

class PxTetrahedronMeshGeometry(PxGeometry):
    def __init__(self, arg: PxTetrahedronMesh, /) -> None: ...

    def isValid(self) -> bool: ...

class PxTolerancesScale:
    def __init__(self, defaultLength: float = 1.0, defaultSpeed: float = 10.0) -> None: ...

    def isValid(self) -> bool: ...

    @property
    def length(self) -> float: ...

    @length.setter
    def length(self, arg: float, /) -> None: ...

    @property
    def speed(self) -> float: ...

    @speed.setter
    def speed(self, arg: float, /) -> None: ...

class PxTransform:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, position: PxVec3) -> None: ...

    @overload
    def __init__(self, orientation: PxQuat) -> None: ...

    @overload
    def __init__(self, x: float, y: float, z: float, aQ: PxQuat) -> None: ...

    @overload
    def __init__(self, p0: PxVec3, q0: PxQuat) -> None: ...

    @overload
    def __init__(self, arg: PxMat44, /) -> None: ...

    @property
    def translation(self) -> PxVec3: ...

    @translation.setter
    def translation(self, arg: PxVec3, /) -> None: ...

    @property
    def rotation(self) -> PxQuat: ...

    @rotation.setter
    def rotation(self, arg: PxQuat, /) -> None: ...

    def getInverse(self) -> PxTransform: ...

    def getNormalized(self) -> PxTransform: ...

    @overload
    def transform(self, input: PxVec3) -> PxVec3: ...

    @overload
    def transform(self, input: PxTransform) -> PxTransform: ...

    @overload
    def transformInv(self, input: PxVec3) -> PxVec3: ...

    @overload
    def transformInv(self, input: PxTransform) -> PxTransform: ...

    def rotate(self, input: PxVec3) -> PxVec3: ...

    def rotateInv(self, input: PxVec3) -> PxVec3: ...

    def isValid(self) -> bool: ...

    def isSane(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def __eq__(self, arg: PxTransform, /) -> bool: ...

    def __imul__(self, arg: PxTransform, /) -> PxTransform: ...

    def __mul__(self, arg: PxTransform, /) -> PxTransform: ...

class PxTriangleMesh:
    def getNbVertices(self) -> int: ...

    def getVertices(self) -> PxVec3: ...

    def getVerticesForModification(self) -> PxVec3: ...

    def refitBVH(self) -> PxBounds3: ...

    def getNbTriangles(self) -> int: ...

    def getTriangleMeshFlags(self) -> int: ...

    def release(self) -> None: ...

    def getTriangleMaterialIndex(self, arg: int, /) -> int: ...

    def getLocalBounds(self) -> PxBounds3: ...

    def getSDFDimensions(self, arg0: int, arg1: int, arg2: int, /) -> None: ...

    def setPreferSDFProjection(self, arg: bool, /) -> None: ...

    def getPreferSDFProjection(self) -> bool: ...

    def getMassInformation(self, arg0: float, arg1: PxMat33, arg2: PxVec3, /) -> None: ...

class PxTriangleMeshGeometry(PxGeometry):
    def __init__(self, arg0: PxMeshScale, arg1: int, /) -> PxTriangleMeshGeometry: ...

    def isValid(self) -> bool: ...

class PxUserControllerHitReport:
    pass

class PxVec3:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, v: PxVec3) -> float: ...

    def cross(self, v: PxVec3) -> PxVec3: ...

    def getNormalized(self) -> PxVec3: ...

    def normalize(self) -> float: ...

    def normalizeSafe(self) -> float: ...

    def normalizeFast(self) -> float: ...

    def multiply(self, a: PxVec3) -> PxVec3: ...

    def minimum(self, v: PxVec3) -> PxVec3: ...

    def minElement(self) -> float: ...

    def maximum(self, v: PxVec3) -> PxVec3: ...

    def maxElement(self) -> float: ...

    def abs(self) -> PxVec3: ...

    def __iadd__(self, arg: PxVec3, /) -> PxVec3: ...

    def __add__(self, arg: PxVec3, /) -> PxVec3: ...

    def __isub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __sub__(self, arg: PxVec3, /) -> PxVec3: ...

    def __imul__(self, arg: float, /) -> PxVec3: ...

    def __mul__(self, arg: float, /) -> PxVec3: ...

    def __itruediv__(self, arg: float, /) -> PxVec3: ...

    def __truediv__(self, arg: float, /) -> PxVec3: ...

    def __neg__(self) -> PxVec3: ...

    def __ne__(self, arg: PxVec3, /) -> bool: ...

    def __eq__(self, arg: PxVec3, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...

class PxVec3d:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, v: PxVec3d) -> float: ...

    def cross(self, v: PxVec3d) -> PxVec3d: ...

    def getNormalized(self) -> PxVec3d: ...

    def normalize(self) -> float: ...

    def normalizeSafe(self) -> float: ...

    def normalizeFast(self) -> float: ...

    def multiply(self, a: PxVec3d) -> PxVec3d: ...

    def minimum(self, v: PxVec3d) -> PxVec3d: ...

    def minElement(self) -> float: ...

    def maximum(self, v: PxVec3d) -> PxVec3d: ...

    def maxElement(self) -> float: ...

    def abs(self) -> PxVec3d: ...

    def __iadd__(self, arg: PxVec3d, /) -> PxVec3d: ...

    def __add__(self, arg: PxVec3d, /) -> PxVec3d: ...

    def __isub__(self, arg: PxVec3d, /) -> PxVec3d: ...

    def __sub__(self, arg: PxVec3d, /) -> PxVec3d: ...

    def __imul__(self, arg: float, /) -> PxVec3d: ...

    def __mul__(self, arg: float, /) -> PxVec3d: ...

    def __itruediv__(self, arg: float, /) -> PxVec3d: ...

    def __truediv__(self, arg: float, /) -> PxVec3d: ...

    def __neg__(self) -> PxVec3d: ...

    def __ne__(self, arg: PxVec3d, /) -> bool: ...

    def __eq__(self, arg: PxVec3d, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...

class PxVec4:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, a: float) -> None: ...

    @overload
    def __init__(self, nx: float, ny: float, nz: float, nw: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def z(self) -> float: ...

    @z.setter
    def z(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    def isZero(self) -> bool: ...

    def isFinite(self) -> bool: ...

    def isNormalized(self) -> bool: ...

    def magnitudeSquared(self) -> float: ...

    def magnitude(self) -> float: ...

    def dot(self, v: PxVec4) -> float: ...

    def getNormalized(self) -> PxVec4: ...

    def normalize(self) -> float: ...

    def multiply(self, a: PxVec4) -> PxVec4: ...

    def minimum(self, v: PxVec4) -> PxVec4: ...

    def maximum(self, v: PxVec4) -> PxVec4: ...

    def __iadd__(self, arg: PxVec4, /) -> PxVec4: ...

    def __add__(self, arg: PxVec4, /) -> PxVec4: ...

    def __isub__(self, arg: PxVec4, /) -> PxVec4: ...

    def __sub__(self, arg: PxVec4, /) -> PxVec4: ...

    def __imul__(self, arg: float, /) -> PxVec4: ...

    def __mul__(self, arg: float, /) -> PxVec4: ...

    def __itruediv__(self, arg: float, /) -> PxVec4: ...

    def __truediv__(self, arg: float, /) -> PxVec4: ...

    def __neg__(self) -> PxVec4: ...

    def __ne__(self, arg: PxVec4, /) -> bool: ...

    def __eq__(self, arg: PxVec4, /) -> bool: ...

    def __setitem__(self, arg0: int, arg1: float, /) -> None: ...

    def __getitem__(self, arg: int, /) -> float: ...

class PxZERO(enum.Enum):
    PxZero = 0

class QueryFilterCallback(PxQueryFilterCallback):
    def __init__(self, arg0: Callable[[PxFilterData, PxShape, PxRigidActor, int], PxQueryHitType], arg1: Callable[[PxFilterData, PxQueryHit, PxShape, PxRigidActor], PxQueryHitType], /) -> None: ...

class SimulationEventCallback(PxSimulationEventCallback):
    pass

class SimulationFilterCallback(PxSimulationFilterCallback):
    pass

class UserControllerHitReport(PxUserControllerHitReport):
    def __init__(self, arg0: Callable[[PxControllersHit], None], arg1: Callable[[PxControllerObstacleHit], None], arg2: Callable[[PxControllerShapeHit], None], /) -> None: ...
